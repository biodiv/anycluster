{"mappings":"A,I,E,Q,qB,E,Q,6B,S,E,C,C,C,C,C,C,C,E,O,e,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,E,O,Q,gB,I,2C,E,O,Q,mB,I,EE8BO,OAAM,UAAyB,EAAA,iBAMlC,YAAY,CAAc,CAAE,CAAQ,CAAE,CAAc,CAAE,CAAwB,CAAE,CAAkC,CAAE,CAEhH,IAAM,EAAS,IAAI,EAAA,OAAO,CACtB,OAAQ,EACR,QAAS,UACT,UAAW,CAAC,SAAU,UAAU,AACpC,GAEA,EAAO,OAAO,KAAK,AAAC,IAChB,IAAI,CAAC,OAAS,CAClB,GACK,MAAM,AAAA,IAEP,GAEJ,KAAK,CAAC,EAAK,EAAQ,EAAkB,GAErC,IAAI,CAAC,YAAc,IAAI,CAAC,SAE5B,CAGA,YAAa,CACT,IAAI,CAAC,IAAI,KAAK,QAAQ,AAAC,IACnB,IAAI,CAAC,IAAI,KAAK,OAAO,EACzB,EACJ,CAEA,QAAQ,CAAiB,CAAE,CAEvB,IAAI,CAAC,IAAI,KAAK,WACV,EAGR,CAEA,qBAAsB,CAElB,IAAI,CAAC,IAAI,KAAK,SAAS,AAAC,IAEpB,GAAI,AAAsC,QAAtC,EAAQ,YAAY,eAAyB,CAE7C,IAAM,EAAe,IAAI,CAAC,iBAAiB,EAAQ,YAAY,UAEzD,EAAY,IAAI,CAAC,gBAAgB,CAAC,EAAa,CAC/C,EAAc,IAAI,CAAC,gBAAgB,CAAC,EAAa,CAWvD,MARc,CACV,UAAa,EAEb,aALiB,EAMjB,YAAe,CAEnB,CAGJ,CAEJ,GAEA,IAAI,CAAC,IAAI,KAAK,YAAY,QAAS,AAAC,IAChC,IAAM,EAAU,EAAM,QAElB,CAAA,AAAuB,QAAvB,EAAQ,aAAyB,AAAuB,UAAvB,EAAQ,WAAe,IAIpD,AAFO,IAAI,CAAC,WAEJ,IAAI,CAAC,SAAW,AAAiB,GAAjB,EAAQ,MAChC,IAAI,CAAC,mBAAmB,GAIxB,IAAI,CAAC,oBAAoB,EAAQ,EAAG,EAAQ,GAGxD,EACJ,CAEA,iBAAkB,CAClB,CAEA,cAAc,CAAgB,CAAE,CAE5B,IAAM,EAAa,IAAI,CAAC,cAAc,GAEhC,EAAW,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,EAAW,IAAI,CAAC,EAAE,CAAE,EAAW,IAAI,CAAC,EAAE,EAC3E,EAAS,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,EAAW,MAAM,CAAC,EAAE,CAAE,EAAW,MAAM,CAAC,EAAE,EAE9E,EAAa,CACf,IAAO,EAAW,IAClB,KAAQ,EACR,OAAU,CACd,EAEA,OAAO,CACX,CAEA,WAAW,CAAgB,CAAE,CAEzB,IAAM,EAAa,IAAI,CAAC,cAAc,GAEhC,EAA+B,CACjC,IAAO,IAAI,CAAC,IACZ,SAAY,CACR,IAAO,EAAQ,OAAO,EACtB,IAAO,EAAQ,OAAO,CAC1B,EACA,KAAQ,CACZ,CAEI,CAAA,IAAI,CAAC,WAAa,AAAA,EAAA,SAAS,OAAS,EAAQ,MAAQ,GACpD,CAAA,EAAc,MAAQ,CAClB,KAAM,EAAQ,MAAM,WACpB,MAAO,OACP,WAAY,MAChB,CAAA,EAGJ,IAAI,EAAS,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,GAEzC,EAAS,IAAI,CAAC,eAAe,EAAQ,GAErC,IAAI,CAAC,uBAAuB,GAE5B,IAAI,CAAC,WAAW,KAAK,EACzB,CAEA,SAAS,CAAgB,CAAE,CACvB,IAAM,EAAQ,EAAQ,MAEtB,GAAI,AAAS,GAAT,EACA,IAAI,CAAC,WAAW,OAGf,CAED,IAAM,EAAU,CACZ,KAAQ,UACR,SAAY,EAAQ,QACpB,WAAc,CACV,YAAgB,OAChB,EAAK,EAAQ,OAAO,EACpB,EAAK,EAAQ,OAAO,EACpB,MAAS,EACT,QAAW,EAAQ,OACvB,CACJ,EAEM,EAAO,IAAI,CAAC,IAAI,KAAK,WAAW,EAAQ,CAAC,EAAE,AAEjD,CAAA,EAAK,EAAI,EAAQ,OAAO,EACxB,EAAK,EAAI,EAAQ,OAAO,EACxB,EAAK,MAAQ,EACb,EAAK,QAAU,EACf,EAAK,YAAc,MAEvB,CACJ,CAEA,kBAAmB,CAEf,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,WAAW,OAAQ,IACxC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,MAG9B,IAAI,CAAC,IAAI,KAAK,QAAQ,AAAC,IACQ,QAAvB,EAAQ,aACR,IAAI,CAAC,IAAI,KAAK,OAAO,EAE7B,GAEA,IAAI,CAAC,WAAW,OAAS,CAC7B,CAEA,sBAAuB,CACnB,IAAI,CAAC,IAAI,YAAY,UAAW,IAAM,IAAI,CAAC,eAC3C,IAAI,CAAC,IAAI,YAAY,eAAgB,KACjC,IAAI,CAAC,mBACL,IAAI,CAAC,aACT,EACJ,CAGA,aAAwB,CAEpB,IAAM,EAAe,IAAI,CAAC,IAAI,YACxB,EAAY,EAAa,eACzB,EAAY,EAAa,eAEzB,EAAW,CACb,KAAQ,EAAU,MAClB,MAAS,EAAU,MACnB,IAAO,EAAU,MACjB,OAAU,EAAU,KACxB,EAEA,OAAO,CACX,CAEA,SAAkB,CACd,OAAO,IAAI,CAAC,IAAI,SACpB,CAEA,QAAQ,CAAY,CAAQ,CACxB,IAAI,CAAC,IAAI,QAAQ,EACrB,CAGA,OAAO,CAAS,CAAE,CAAS,CAAE,CAAY,CAAQ,CAU7C,IAAI,CAAC,IAAI,WARU,CACf,OAAU,CACN,IAAK,EACL,IAAK,CACT,EACA,KAAQ,CACZ,EAGJ,CAEA,uBAAuB,CAAM,CAAE,CAE3B,IAAM,EAAO,IAAI,CAAC,SAEd,CAAA,GAAQ,IAAM,AAAgB,GAAhB,EAAO,MACrB,EAAO,YAAY,QAAS,AAAC,IACzB,IAAI,CAAC,mBAAmB,EAC5B,GAIA,EAAO,YAAY,QAAS,AAAC,IACzB,IAAI,CAAC,oBAAoB,EAAO,EAAG,EAAO,EAC9C,EAER,CAEJ","sources":["<anon>","src/index.ts","src/anycluster-google.ts"],"sourcesContent":["var $kEX8F$anyclusterclient = require(\"anycluster-client\");\nvar $kEX8F$googlemapsjsapiloader = require(\"@googlemaps/js-api-loader\");\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"ClusterMethod\", () => $13155a20c7fd0c4b$re_export$ClusterMethod);\n$parcel$export(module.exports, \"AnyclusterGoogle\", () => $13155a20c7fd0c4b$export$bdd7c550c60f19cc);\n\n\nclass $13155a20c7fd0c4b$export$bdd7c550c60f19cc extends (0, $kEX8F$anyclusterclient.AnyclusterClient) {\n    constructor(apiKey, map, apiUrl, markerFolderPath, settings){\n        const loader = new (0, $kEX8F$googlemapsjsapiloader.Loader)({\n            apiKey: apiKey,\n            version: \"monthly\",\n            libraries: [\n                \"marker\",\n                \"drawing\"\n            ]\n        });\n        loader.load().then((google)=>{\n            this.google = google;\n        }).catch((e)=>{\n        // do something\n        });\n        super(map, apiUrl, markerFolderPath, settings);\n        this.currentZoom = this.getZoom();\n    }\n    removeArea() {\n        this.map.data.forEach((feature)=>{\n            this.map.data.remove(feature);\n        });\n    }\n    addArea(geojson) {\n        this.map.data.addGeoJson(geojson);\n    }\n    createClusterLayers() {\n        this.map.data.setStyle((feature)=>{\n            if (feature.getProperty(\"clustertype\") == \"cell\") {\n                const roundedCount = this.roundMarkerCount(feature.getProperty(\"count\"));\n                const fillColor = this.gridStrokeColors[roundedCount];\n                const strokeColor = this.gridStrokeColors[roundedCount];\n                const strokeWeight = 1;\n                const style = {\n                    \"fillColor\": fillColor,\n                    //\"fillOpacity\": .5,\n                    \"strokeWeight\": strokeWeight,\n                    \"strokeColor\": strokeColor\n                };\n                return style;\n            }\n        });\n        this.map.data.addListener(\"click\", (event)=>{\n            const feature = event.feature;\n            if (feature.clustertype == \"cell\" || feature.clustertype == \"marker\") {\n                let zoom = this.getZoom();\n                if (zoom >= this.maxZoom || feature.count == 1) this.onMarkerFinalClick(feature);\n                else this.markerClickFunction(feature.x, feature.y);\n            }\n        });\n    }\n    createAreaLayer() {}\n    getMarkerIcon(cluster) {\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n        const iconSize = new this.google.maps.Size(piniconObj.size[0], piniconObj.size[1]);\n        const anchor = new this.google.maps.Point(piniconObj.anchor[0], piniconObj.anchor[1]);\n        const markerIcon = {\n            \"url\": piniconObj.url,\n            \"size\": iconSize,\n            \"anchor\": anchor\n        };\n        return markerIcon;\n    }\n    drawMarker(cluster) {\n        const markerIcon = this.getMarkerIcon(cluster);\n        const markerOptions = {\n            \"map\": this.map,\n            \"position\": {\n                \"lat\": cluster.center.y,\n                \"lng\": cluster.center.x\n            },\n            \"icon\": markerIcon\n        };\n        if (this.iconType === (0, $kEX8F$anyclusterclient.IconType).exact && cluster.count > 1) markerOptions.label = {\n            text: cluster.count.toString(),\n            color: \"#FFF\",\n            fontWeight: \"bold\"\n        };\n        let marker = new this.google.maps.Marker(markerOptions);\n        marker = this.setMarkerProps(marker, cluster);\n        this.addMarkerClickListener(marker);\n        this.markerList.push(marker);\n    }\n    drawCell(cluster) {\n        const count = cluster.count;\n        if (count == 1) this.drawMarker(cluster);\n        else {\n            const geojson = {\n                \"type\": \"Feature\",\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"clustertype\": \"cell\",\n                    \"x\": cluster.center.x,\n                    \"y\": cluster.center.y,\n                    \"count\": count,\n                    \"geojson\": cluster.geojson\n                }\n            };\n            const cell = this.map.data.addGeoJson(geojson)[0];\n            cell.x = cluster.center.x;\n            cell.y = cluster.center.y;\n            cell.count = count;\n            cell.geojson = geojson;\n            cell.clustertype = \"cell\";\n        }\n    }\n    removeAllMarkers() {\n        for(let i = 0; i < this.markerList.length; i++)this.markerList[i].setMap(null);\n        this.map.data.forEach((feature)=>{\n            if (feature.clustertype == \"cell\") this.map.data.remove(feature);\n        });\n        this.markerList.length = 0;\n    }\n    addMapEventListeners() {\n        this.map.addListener(\"dragend\", ()=>this.getClusters());\n        this.map.addListener(\"zoom_changed\", ()=>{\n            this.removeAllMarkers();\n            this.getClusters();\n        });\n    }\n    getViewport() {\n        const latLngBounds = this.map.getBounds();\n        const northEast = latLngBounds.getNorthEast();\n        const southWest = latLngBounds.getSouthWest();\n        const viewport = {\n            \"left\": southWest.lng(),\n            \"right\": northEast.lng(),\n            \"top\": northEast.lat(),\n            \"bottom\": southWest.lat()\n        };\n        return viewport;\n    }\n    getZoom() {\n        return this.map.getZoom();\n    }\n    setZoom(zoom) {\n        this.map.setZoom(zoom);\n    }\n    setMap(x, y, zoom) {\n        const mapOptions = {\n            \"center\": {\n                lat: y,\n                lng: x\n            },\n            \"zoom\": zoom\n        };\n        this.map.setOptions(mapOptions);\n    }\n    addMarkerClickListener(marker) {\n        const zoom = this.getZoom();\n        if (zoom >= 13 || marker.count == 1) marker.addListener(\"click\", (event)=>{\n            this.onMarkerFinalClick(marker);\n        });\n        else marker.addListener(\"click\", (event)=>{\n            this.markerClickFunction(marker.x, marker.y);\n        });\n    }\n}\n\n\n\n\n//# sourceMappingURL=main.js.map\n","export {\n    ClusterMethod,\n    AnyclusterGoogle,\n} from \"./anycluster-google\";","import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    Cluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n    IconType,\n} from 'anycluster-client';\n\nimport { Loader } from '@googlemaps/js-api-loader';\n\ninterface MarkerOptions {\n    map: any,\n    position: {\n        lat: number,\n        lng: number\n    },\n    icon: any,\n    label?: {\n        text: string,\n        color?: string,\n        fontWeight?: string\n    }\n};\n\nexport {\n    ClusterMethod\n};\n\nexport class AnyclusterGoogle extends AnyclusterClient {\n\n    currentZoom: number\n\n    google: any\n\n    constructor(apiKey: string, map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n\n        const loader = new Loader({\n            apiKey: apiKey,\n            version: \"monthly\",\n            libraries: [\"marker\", \"drawing\"]\n        });\n\n        loader.load().then((google) => {\n            this.google = google;\n        })\n            .catch(e => {\n                // do something\n            });\n\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n    }\n\n\n    removeArea() {\n        this.map.data.forEach((feature) => {\n            this.map.data.remove(feature);\n        });\n    }\n\n    addArea(geojson: IGeoJSON) {\n\n        this.map.data.addGeoJson(\n            geojson\n        );\n\n    }\n\n    createClusterLayers() {\n\n        this.map.data.setStyle((feature) => {\n\n            if (feature.getProperty(\"clustertype\") == \"cell\"){\n\n                const roundedCount = this.roundMarkerCount(feature.getProperty(\"count\"));\n\n                const fillColor = this.gridStrokeColors[roundedCount];\n                const strokeColor = this.gridStrokeColors[roundedCount];\n                const strokeWeight = 1;\n\n                const style = {\n                    \"fillColor\": fillColor,\n                    //\"fillOpacity\": .5,\n                    \"strokeWeight\": strokeWeight,\n                    \"strokeColor\": strokeColor,\n                    //\"strokeOpacity\": .8\n                };\n\n                return style;\n            }\n\n        });\n\n        this.map.data.addListener(\"click\", (event: any) => {\n            const feature = event.feature;\n\n            if (feature.clustertype == \"cell\" || feature.clustertype == \"marker\"){\n\n                let zoom = this.getZoom();\n\n                if (zoom >= this.maxZoom || feature.count == 1) {\n                    this.onMarkerFinalClick(feature);\n                }\n\n                else {\n                    this.markerClickFunction(feature.x, feature.y);\n                }\n            }\n        });\n    }\n\n    createAreaLayer() {\n    }\n\n    getMarkerIcon(cluster: Cluster) {\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n\n        const iconSize = new this.google.maps.Size(piniconObj.size[0], piniconObj.size[1]);\n        const anchor = new this.google.maps.Point(piniconObj.anchor[0], piniconObj.anchor[1]);\n\n        const markerIcon = {\n            \"url\": piniconObj.url,\n            \"size\": iconSize,\n            \"anchor\": anchor,\n        };\n\n        return markerIcon;\n    }\n\n    drawMarker(cluster: Cluster) {\n\n        const markerIcon = this.getMarkerIcon(cluster);\n\n        const markerOptions: MarkerOptions = {\n            \"map\": this.map,\n            \"position\": {\n                \"lat\": cluster.center.y,\n                \"lng\": cluster.center.x\n            },\n            \"icon\": markerIcon,\n        };\n\n        if (this.iconType === IconType.exact && cluster.count > 1) {\n            markerOptions.label = {\n                text: cluster.count.toString(),\n                color: '#FFF',\n                fontWeight: 'bold',\n            };\n        }\n\n        let marker = new this.google.maps.Marker(markerOptions);\n\n        marker = this.setMarkerProps(marker, cluster);\n\n        this.addMarkerClickListener(marker);\n\n        this.markerList.push(marker);\n    }\n\n    drawCell(cluster: Cluster) {\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawMarker(cluster);\n        }\n\n        else {\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"clustertype\" : \"cell\",\n                    \"x\": cluster.center.x,\n                    \"y\": cluster.center.y,\n                    \"count\": count,\n                    \"geojson\": cluster.geojson,\n                }\n            };\n\n            const cell = this.map.data.addGeoJson(geojson)[0];\n\n            cell.x = cluster.center.x;\n            cell.y = cluster.center.y;\n            cell.count = count;\n            cell.geojson = geojson;\n            cell.clustertype = \"cell\";\n\n        }\n    }\n\n    removeAllMarkers() {\n\n        for (let i = 0; i < this.markerList.length; i++) {\n            this.markerList[i].setMap(null);\n        }\n\n        this.map.data.forEach((feature) => {\n            if (feature.clustertype == \"cell\"){\n                this.map.data.remove(feature);\n            }\n        });\n\n        this.markerList.length = 0;\n    }\n\n    addMapEventListeners() {\n        this.map.addListener(\"dragend\", () => this.getClusters());\n        this.map.addListener(\"zoom_changed\", () => {\n            this.removeAllMarkers();\n            this.getClusters();\n        });\n    }\n\n\n    getViewport(): Viewport {\n\n        const latLngBounds = this.map.getBounds();\n        const northEast = latLngBounds.getNorthEast();\n        const southWest = latLngBounds.getSouthWest();\n\n        const viewport = {\n            \"left\": southWest.lng(),\n            \"right\": northEast.lng(),\n            \"top\": northEast.lat(),\n            \"bottom\": southWest.lat(),\n        };\n\n        return viewport;\n    }\n\n    getZoom(): number {\n        return this.map.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n\n        const mapOptions = {\n            \"center\": {\n                lat: y,\n                lng: x\n            },\n            \"zoom\": zoom,\n        };\n\n        this.map.setOptions(mapOptions);\n    }\n\n    addMarkerClickListener(marker) {\n\n        const zoom = this.getZoom();\n\n        if (zoom >= 13 || marker.count == 1) {\n            marker.addListener(\"click\", (event) => {\n                this.onMarkerFinalClick(marker);\n            });\n        }\n\n        else {\n            marker.addListener(\"click\", (event) => {\n                this.markerClickFunction(marker.x, marker.y);\n            });\n        }\n    }\n\n}"],"names":["$kEX8F$anyclusterclient","require","$kEX8F$googlemapsjsapiloader","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","module","exports","$13155a20c7fd0c4b$re_export$ClusterMethod","$13155a20c7fd0c4b$export$bdd7c550c60f19cc","AnyclusterClient","constructor","apiKey","map","apiUrl","markerFolderPath","settings","loader","Loader","version","libraries","load","then","google","catch","currentZoom","getZoom","removeArea","data","forEach","feature","remove","addArea","geojson","addGeoJson","createClusterLayers","setStyle","getProperty","roundedCount","roundMarkerCount","fillColor","gridStrokeColors","strokeColor","addListener","event","clustertype","zoom","maxZoom","count","onMarkerFinalClick","markerClickFunction","x","y","createAreaLayer","getMarkerIcon","cluster","piniconObj","selectPinIcon","iconSize","maps","Size","size","anchor","Point","markerIcon","url","drawMarker","markerOptions","center","iconType","IconType","exact","label","text","toString","color","fontWeight","marker","Marker","setMarkerProps","addMarkerClickListener","markerList","push","drawCell","cell","removeAllMarkers","i","length","setMap","addMapEventListeners","getClusters","getViewport","latLngBounds","getBounds","northEast","getNorthEast","southWest","getSouthWest","viewport","lng","lat","setZoom","setOptions"],"version":3,"file":"main.js.map"}