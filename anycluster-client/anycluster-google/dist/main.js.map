{"mappings":"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","sources":["src/anycluster-google.ts"],"sourcesContent":["import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    Cluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n} from 'anycluster-client';\n\nimport { Loader } from '@googlemaps/js-api-loader';\n\nexport {\n    ClusterMethod\n};\n\nexport class AnyclusterGoogle extends AnyclusterClient {\n\n    currentZoom: number\n\n    google: any\n\n    constructor(apiKey: string, map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n\n        const loader = new Loader({\n            apiKey: apiKey,\n            version: \"monthly\",\n            libraries: [\"marker\", \"drawing\"]\n        });\n\n        loader.load().then((google) => {\n            this.google = google;\n        })\n            .catch(e => {\n                // do something\n            });\n\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n    }\n\n\n    removeArea() {\n        this.map.data.forEach((feature) => {\n            this.map.data.remove(feature);\n        });\n    }\n\n    addArea(geojson: IGeoJSON) {\n\n        this.map.data.addGeoJson(\n            geojson\n        );\n\n    }\n\n    createClusterLayers() {\n\n        this.map.data.setStyle((feature) => {\n\n            if (feature.getProperty(\"clustertype\") == \"cell\"){\n\n                const roundedCount = this.roundMarkerCount(feature.getProperty(\"count\"));\n\n                const fillColor = this.gridStrokeColors[roundedCount];\n                const strokeColor = this.gridStrokeColors[roundedCount];\n                const strokeWeight = 1;\n\n                const style = {\n                    \"fillColor\": fillColor,\n                    //\"fillOpacity\": .5,\n                    \"strokeWeight\": strokeWeight,\n                    \"strokeColor\": strokeColor,\n                    //\"strokeOpacity\": .8\n                };\n\n                return style;\n            }\n\n        });\n\n        this.map.data.addListener(\"click\", (event: any) => {\n            const feature = event.feature;\n\n            if (feature.clustertype == \"cell\" || feature.clustertype == \"marker\"){\n\n                let zoom = this.getZoom();\n\n                if (zoom >= 13 || feature.count == 1) {\n                    this.onMarkerFinalClick(feature);\n                }\n\n                else {\n                    this.markerClickFunction(feature.x, feature.y);\n                }\n            }\n        });\n    }\n\n    createAreaLayer() {\n    }\n\n    getMarkerIcon(cluster: Cluster) {\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n\n        const iconSize = new this.google.maps.Size(piniconObj.size[0], piniconObj.size[1]);\n        const anchor = new this.google.maps.Point(piniconObj.anchor[0], piniconObj.anchor[1]);\n\n        const markerIcon = {\n            \"url\": piniconObj.url,\n            \"size\": iconSize,\n            \"anchor\": anchor,\n        };\n\n        return markerIcon;\n    }\n\n    drawMarker(cluster: Cluster) {\n\n        const markerIcon = this.getMarkerIcon(cluster);\n\n        const markerOptions = {\n            \"map\": this.map,\n            \"position\": {\n                \"lat\": cluster.center.y,\n                \"lng\": cluster.center.x\n            },\n            \"icon\": markerIcon,\n        };\n\n        let marker = new this.google.maps.Marker(markerOptions);\n\n        marker = this.setMarkerProps(marker, cluster);\n\n        this.addMarkerClickListener(marker);\n\n        this.markerList.push(marker);\n    }\n\n    drawCell(cluster: Cluster) {\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawMarker(cluster);\n        }\n\n        else {\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"clustertype\" : \"cell\",\n                    \"x\": cluster.center.x,\n                    \"y\": cluster.center.y,\n                    \"count\": count,\n                    \"geojson\": cluster.geojson,\n                }\n            };\n\n            const cell = this.map.data.addGeoJson(geojson)[0];\n\n            cell.x = cluster.center.x;\n            cell.y = cluster.center.y;\n            cell.count = count;\n            cell.geojson = geojson;\n            cell.clustertype = \"cell\";\n\n        }\n    }\n\n    removeAllMarkers() {\n\n        for (let i = 0; i < this.markerList.length; i++) {\n            this.markerList[i].setMap(null);\n        }\n\n        this.map.data.forEach((feature) => {\n            if (feature.clustertype == \"cell\"){\n                this.map.data.remove(feature);\n            }\n        });\n\n        this.markerList.length = 0;\n    }\n\n    addMapEventListeners() {\n        this.map.addListener(\"dragend\", () => this.getClusters());\n        this.map.addListener(\"zoom_changed\", () => {\n            this.removeAllMarkers();\n            this.getClusters();\n        });\n    }\n\n\n    getViewport(): Viewport {\n\n        const latLngBounds = this.map.getBounds();\n        const northEast = latLngBounds.getNorthEast();\n        const southWest = latLngBounds.getSouthWest();\n\n        const viewport = {\n            \"left\": southWest.lng(),\n            \"right\": northEast.lng(),\n            \"top\": northEast.lat(),\n            \"bottom\": southWest.lat(),\n        };\n\n        return viewport;\n    }\n\n    getZoom(): number {\n        return this.map.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n\n        const mapOptions = {\n            \"center\": {\n                lat: y,\n                lng: x\n            },\n            \"zoom\": zoom,\n        };\n\n        this.map.setOptions(mapOptions);\n    }\n\n    addMarkerClickListener(marker) {\n\n        const zoom = this.getZoom();\n\n        if (zoom >= 13 || marker.count == 1) {\n            marker.addListener(\"click\", (event) => {\n                this.onMarkerFinalClick(marker);\n            });\n        }\n\n        else {\n            marker.addListener(\"click\", (event) => {\n                this.markerClickFunction(marker.x, marker.y);\n            });\n        }\n    }\n\n}"],"names":["$13155a20c7fd0c4b$export$bdd7c550c60f19cc","$kEX8F$anyclusterclient","AnyclusterClient","constructor","apiKey","map","apiUrl","markerFolderPath","settings","$kEX8F$googlemapsjsapiloader","Loader","version","libraries","load","then","google","this","catch","e","super","currentZoom","getZoom","removeArea","data","forEach","feature","remove","addArea","geojson","addGeoJson","createClusterLayers","setStyle","getProperty","roundedCount","roundMarkerCount","fillColor","gridStrokeColors","strokeWeight","strokeColor","addListener","event","clustertype","count","onMarkerFinalClick","markerClickFunction","x","y","createAreaLayer","getMarkerIcon","cluster","piniconObj","selectPinIcon","iconSize","maps","Size","size","anchor","Point","url","drawMarker","markerIcon","markerOptions","position","lat","center","lng","icon","marker","Marker","setMarkerProps","addMarkerClickListener","markerList","push","drawCell","type","geometry","properties","cell","removeAllMarkers","i","length","setMap","addMapEventListeners","getClusters","getViewport","latLngBounds","getBounds","northEast","getNorthEast","southWest","getSouthWest","left","right","top","bottom","setZoom","zoom","mapOptions","setOptions"],"version":3,"file":"main.js.map"}