{"mappings":"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","sources":["src/index.ts","src/anycluster-google.ts"],"sourcesContent":["export {\n    ClusterMethod,\n    AnyclusterGoogle,\n} from \"./anycluster-google\";","import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    Cluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n} from 'anycluster-client';\n\nimport { Loader } from '@googlemaps/js-api-loader';\n\nexport {\n    ClusterMethod\n};\n\nexport class AnyclusterGoogle extends AnyclusterClient {\n\n    currentZoom: number\n\n    google: any\n\n    constructor(apiKey: string, map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n\n        const loader = new Loader({\n            apiKey: apiKey,\n            version: \"monthly\",\n            libraries: [\"marker\", \"drawing\"]\n        });\n\n        loader.load().then((google) => {\n            this.google = google;\n        })\n            .catch(e => {\n                // do something\n            });\n\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n    }\n\n\n    removeArea() {\n        this.map.data.forEach((feature) => {\n            this.map.data.remove(feature);\n        });\n    }\n\n    addArea(geojson: IGeoJSON) {\n\n        this.map.data.addGeoJson(\n            geojson\n        );\n\n    }\n\n    createClusterLayers() {\n\n        this.map.data.setStyle((feature) => {\n\n            if (feature.getProperty(\"clustertype\") == \"cell\"){\n\n                const roundedCount = this.roundMarkerCount(feature.getProperty(\"count\"));\n\n                const fillColor = this.gridStrokeColors[roundedCount];\n                const strokeColor = this.gridStrokeColors[roundedCount];\n                const strokeWeight = 1;\n\n                const style = {\n                    \"fillColor\": fillColor,\n                    //\"fillOpacity\": .5,\n                    \"strokeWeight\": strokeWeight,\n                    \"strokeColor\": strokeColor,\n                    //\"strokeOpacity\": .8\n                };\n\n                return style;\n            }\n\n        });\n\n        this.map.data.addListener(\"click\", (event: any) => {\n            const feature = event.feature;\n\n            if (feature.clustertype == \"cell\" || feature.clustertype == \"marker\"){\n\n                let zoom = this.getZoom();\n\n                if (zoom >= 13 || feature.count == 1) {\n                    this.onMarkerFinalClick(feature);\n                }\n\n                else {\n                    this.markerClickFunction(feature.x, feature.y);\n                }\n            }\n        });\n    }\n\n    createAreaLayer() {\n    }\n\n    getMarkerIcon(cluster: Cluster) {\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n\n        const iconSize = new this.google.maps.Size(piniconObj.size[0], piniconObj.size[1]);\n        const anchor = new this.google.maps.Point(piniconObj.anchor[0], piniconObj.anchor[1]);\n\n        const markerIcon = {\n            \"url\": piniconObj.url,\n            \"size\": iconSize,\n            \"anchor\": anchor,\n        };\n\n        return markerIcon;\n    }\n\n    drawMarker(cluster: Cluster) {\n\n        const markerIcon = this.getMarkerIcon(cluster);\n\n        const markerOptions = {\n            \"map\": this.map,\n            \"position\": {\n                \"lat\": cluster.center.y,\n                \"lng\": cluster.center.x\n            },\n            \"icon\": markerIcon,\n        };\n\n        let marker = new this.google.maps.Marker(markerOptions);\n\n        marker = this.setMarkerProps(marker, cluster);\n\n        this.addMarkerClickListener(marker);\n\n        this.markerList.push(marker);\n    }\n\n    drawCell(cluster: Cluster) {\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawMarker(cluster);\n        }\n\n        else {\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"clustertype\" : \"cell\",\n                    \"x\": cluster.center.x,\n                    \"y\": cluster.center.y,\n                    \"count\": count,\n                    \"geojson\": cluster.geojson,\n                }\n            };\n\n            const cell = this.map.data.addGeoJson(geojson)[0];\n\n            cell.x = cluster.center.x;\n            cell.y = cluster.center.y;\n            cell.count = count;\n            cell.geojson = geojson;\n            cell.clustertype = \"cell\";\n\n        }\n    }\n\n    removeAllMarkers() {\n\n        for (let i = 0; i < this.markerList.length; i++) {\n            this.markerList[i].setMap(null);\n        }\n\n        this.map.data.forEach((feature) => {\n            if (feature.clustertype == \"cell\"){\n                this.map.data.remove(feature);\n            }\n        });\n\n        this.markerList.length = 0;\n    }\n\n    addMapEventListeners() {\n        this.map.addListener(\"dragend\", () => this.getClusters());\n        this.map.addListener(\"zoom_changed\", () => {\n            this.removeAllMarkers();\n            this.getClusters();\n        });\n    }\n\n\n    getViewport(): Viewport {\n\n        const latLngBounds = this.map.getBounds();\n        const northEast = latLngBounds.getNorthEast();\n        const southWest = latLngBounds.getSouthWest();\n\n        const viewport = {\n            \"left\": southWest.lng(),\n            \"right\": northEast.lng(),\n            \"top\": northEast.lat(),\n            \"bottom\": southWest.lat(),\n        };\n\n        return viewport;\n    }\n\n    getZoom(): number {\n        return this.map.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n\n        const mapOptions = {\n            \"center\": {\n                lat: y,\n                lng: x\n            },\n            \"zoom\": zoom,\n        };\n\n        this.map.setOptions(mapOptions);\n    }\n\n    addMarkerClickListener(marker) {\n\n        const zoom = this.getZoom();\n\n        if (zoom >= 13 || marker.count == 1) {\n            marker.addListener(\"click\", (event) => {\n                this.onMarkerFinalClick(marker);\n            });\n        }\n\n        else {\n            marker.addListener(\"click\", (event) => {\n                this.markerClickFunction(marker.x, marker.y);\n            });\n        }\n    }\n\n}"],"names":[],"version":3,"file":"ancluster-google.js.map"}