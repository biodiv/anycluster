{"mappings":"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","sources":["src/index.ts","src/anycluster-google.ts","node_modules/anycluster-client/dist/anycluster.js","node_modules/anycluster-client/dist/src/index.ts","node_modules/anycluster-client/dist/src/consts.ts","node_modules/anycluster-client/dist/src/anycluster.ts","node_modules/anycluster-client/dist/src/anycluster-client.ts","node_modules/@googlemaps/js-api-loader/dist/index.esm.js","node_modules/@googlemaps/js-api-loader/node_modules/tslib/tslib.es6.js","node_modules/@googlemaps/js-api-loader/node_modules/fast-deep-equal/index.js","node_modules/@googlemaps/js-api-loader/src/index.ts"],"sourcesContent":["export {\n    ClusterMethod,\n    AnyclusterGoogle,\n} from \"./anycluster-google\";","import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    KmeansCluster,\n    GridCluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n    IconType,\n} from 'anycluster-client';\n\nimport { Loader } from '@googlemaps/js-api-loader';\n\ninterface MarkerOptions {\n    map: any,\n    position: {\n        lat: number,\n        lng: number\n    },\n    icon: any,\n    label?: {\n        text: string,\n        color?: string,\n        fontWeight?: string\n    }\n};\n\nexport {\n    ClusterMethod\n};\n\nexport class AnyclusterGoogle extends AnyclusterClient {\n\n    currentZoom: number\n\n    google: any\n\n    constructor(apiKey: string, map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n\n        const loader = new Loader({\n            apiKey: apiKey,\n            version: \"monthly\",\n            libraries: [\"marker\", \"drawing\"]\n        });\n\n        loader.load().then((google) => {\n            this.google = google;\n        })\n            .catch(e => {\n                // do something\n            });\n\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n    }\n\n\n    removeArea() {\n        this.map.data.forEach((feature) => {\n            this.map.data.remove(feature);\n        });\n    }\n\n    addArea(geojson: IGeoJSON) {\n\n        this.map.data.addGeoJson(\n            geojson\n        );\n\n    }\n\n    createClusterLayers() {\n\n        this.map.data.setStyle((feature) => {\n\n            if (feature.getProperty(\"clustertype\") == \"cell\"){\n\n                const roundedCount = this.roundMarkerCount(feature.getProperty(\"count\"));\n\n                const fillColor = this.gridStrokeColors[roundedCount];\n                const strokeColor = this.gridStrokeColors[roundedCount];\n                const strokeWeight = 1;\n\n                const style = {\n                    \"fillColor\": fillColor,\n                    //\"fillOpacity\": .5,\n                    \"strokeWeight\": strokeWeight,\n                    \"strokeColor\": strokeColor,\n                    //\"strokeOpacity\": .8\n                };\n\n                return style;\n            }\n\n        });\n\n        this.map.data.addListener(\"click\", (event: any) => {\n            const feature = event.feature;\n\n            if (feature.clustertype == \"cell\" || feature.clustertype == \"marker\"){\n\n                let zoom = this.getZoom();\n\n                if (zoom >= this.maxZoom || feature.count == 1) {\n                    this.onMarkerFinalClick(feature);\n                }\n\n                else {\n                    this.markerClickFunction(feature.x, feature.y);\n                }\n            }\n        });\n    }\n\n    createAreaLayer() {\n    }\n\n    getMarkerIcon(cluster: KmeansCluster | GridCluster) {\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n\n        const iconSize = new this.google.maps.Size(piniconObj.size[0], piniconObj.size[1]);\n        const anchor = new this.google.maps.Point(piniconObj.anchor[0], piniconObj.anchor[1]);\n\n        const markerIcon = {\n            \"url\": piniconObj.url,\n            \"size\": iconSize,\n            \"anchor\": anchor,\n        };\n\n        return markerIcon;\n    }\n\n    _getSingleMarker(cluster: KmeansCluster | GridCluster) {\n        const markerIcon = this.getMarkerIcon(cluster);\n\n        const markerOptions: MarkerOptions = {\n            \"map\": this.map,\n            \"position\": {\n                \"lat\": cluster.center.y,\n                \"lng\": cluster.center.x\n            },\n            \"icon\": markerIcon,\n        };\n\n        if (this.iconType === IconType.exact && cluster.count > 1) {\n            markerOptions.label = {\n                text: cluster.count.toString(),\n                color: '#FFF',\n                fontWeight: 'bold',\n            };\n        }\n\n        const marker = new this.google.maps.Marker(markerOptions);\n\n        return marker;\n    }\n\n    _drawSingleMarker(marker: any) {\n        this.addMarkerClickListener(marker);\n        this.markerList.push(marker);\n    }\n\n    drawKmeansMarker(cluster: KmeansCluster) {\n        let marker = this._getSingleMarker(cluster);\n        marker = this.setMarkerProps(marker, cluster);\n        this._drawSingleMarker(marker);\n    }\n\n    drawGridMakrer(cluster: GridCluster) {\n        let marker = this._getSingleMarker(cluster);\n        marker = this.setCellProps(marker, cluster);\n        this._drawSingleMarker(marker);\n    }\n\n    drawCell(cluster: GridCluster) {\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawGridMarker(cluster);\n        }\n\n        else {\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"clustertype\" : \"cell\",\n                    \"x\": cluster.center.x,\n                    \"y\": cluster.center.y,\n                    \"count\": count,\n                    \"geojson\": cluster.geojson,\n                }\n            };\n\n            const cell = this.map.data.addGeoJson(geojson)[0];\n\n            cell.x = cluster.center.x;\n            cell.y = cluster.center.y;\n            cell.count = count;\n            cell.geojson = geojson;\n            cell.clustertype = \"cell\";\n\n        }\n    }\n\n    removeAllMarkers() {\n\n        for (let i = 0; i < this.markerList.length; i++) {\n            this.markerList[i].setMap(null);\n        }\n\n        this.map.data.forEach((feature) => {\n            if (feature.clustertype == \"cell\"){\n                this.map.data.remove(feature);\n            }\n        });\n\n        this.markerList.length = 0;\n    }\n\n    addMapEventListeners() {\n        this.map.addListener(\"tilesloaded\", () => this.getClusters());\n        this.map.addListener(\"zoom_changed\", () => {\n            this.removeAllMarkers();\n            this.getClusters();\n        });\n    }\n\n\n    getViewport(): Viewport {\n\n        const latLngBounds = this.map.getBounds();\n        const northEast = latLngBounds.getNorthEast();\n        const southWest = latLngBounds.getSouthWest();\n\n        const viewport = {\n            \"left\": southWest.lng(),\n            \"right\": northEast.lng(),\n            \"top\": northEast.lat(),\n            \"bottom\": southWest.lat(),\n        };\n\n        return viewport;\n    }\n\n    getZoom(): number {\n        return this.map.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n\n        const mapOptions = {\n            \"center\": {\n                lat: y,\n                lng: x\n            },\n            \"zoom\": zoom,\n        };\n\n        this.map.setOptions(mapOptions);\n    }\n\n    addMarkerClickListener(marker) {\n\n        const zoom = this.getZoom();\n\n        if (zoom >= 13 || marker.count == 1) {\n            marker.addListener(\"click\", (event) => {\n                this.onMarkerFinalClick(marker);\n            });\n        }\n\n        else {\n            marker.addListener(\"click\", (event) => {\n                this.markerClickFunction(marker.x, marker.y);\n            });\n        }\n    }\n\n}","var $b4f6019a3c0f60c0$export$55fee9ea2526ad0d;\n(function(SRIDS) {\n    SRIDS[\"EPSG4326\"] = \"EPSG:4326\";\n    SRIDS[\"EPSG3857\"] = \"EPSG:3857\";\n})($b4f6019a3c0f60c0$export$55fee9ea2526ad0d || ($b4f6019a3c0f60c0$export$55fee9ea2526ad0d = {}));\nvar $b4f6019a3c0f60c0$export$ae91e066970d978a;\n(function(ClusterMethod) {\n    ClusterMethod[\"kmeans\"] = \"kmeans\";\n    ClusterMethod[\"grid\"] = \"grid\";\n})($b4f6019a3c0f60c0$export$ae91e066970d978a || ($b4f6019a3c0f60c0$export$ae91e066970d978a = {}));\nvar $b4f6019a3c0f60c0$export$8f4397a63c3cef66;\n(function(GeometryType) {\n    GeometryType[\"viewport\"] = \"viewport\";\n    GeometryType[\"area\"] = \"area\";\n})($b4f6019a3c0f60c0$export$8f4397a63c3cef66 || ($b4f6019a3c0f60c0$export$8f4397a63c3cef66 = {}));\nvar $b4f6019a3c0f60c0$export$13ff1290a9e22e77;\n(function(IconType) {\n    IconType[\"exact\"] = \"exact\";\n    IconType[\"rounded\"] = \"rounded\";\n})($b4f6019a3c0f60c0$export$13ff1290a9e22e77 || ($b4f6019a3c0f60c0$export$13ff1290a9e22e77 = {}));\nvar $b4f6019a3c0f60c0$export$9c3a9f8fbf06a34;\n(function(DefaultGridSizes) {\n    DefaultGridSizes[DefaultGridSizes[\"grid\"] = 64] = \"grid\";\n    DefaultGridSizes[DefaultGridSizes[\"kmeans\"] = 150] = \"kmeans\";\n})($b4f6019a3c0f60c0$export$9c3a9f8fbf06a34 || ($b4f6019a3c0f60c0$export$9c3a9f8fbf06a34 = {}));\nconst $b4f6019a3c0f60c0$export$96b1907ff7fa3578 = {\n    1: [\n        24,\n        39\n    ],\n    5: [\n        30,\n        30\n    ],\n    10: [\n        30,\n        30\n    ],\n    50: [\n        40,\n        40\n    ],\n    100: [\n        40,\n        40\n    ],\n    1000: [\n        50,\n        50\n    ],\n    10000: [\n        60,\n        60\n    ]\n};\nvar $b4f6019a3c0f60c0$export$7fa100a28fbb5fe2;\n(function(Operators) {\n    Operators[\"in\"] = \"in\";\n    Operators[\"notIn\"] = \"not in\";\n    Operators[\"equals\"] = \"=\";\n    Operators[\"unEquals\"] = \"!=\";\n    Operators[\"largerThan\"] = \">=\";\n    Operators[\"smallerThan\"] = \"<=\";\n    Operators[\"startswith\"] = \"startswith\";\n    Operators[\"contains\"] = \"contains\";\n})($b4f6019a3c0f60c0$export$7fa100a28fbb5fe2 || ($b4f6019a3c0f60c0$export$7fa100a28fbb5fe2 = {}));\nvar $b4f6019a3c0f60c0$export$9a28c02ac0f6fc9d;\n(function(LogicalOperators) {\n    LogicalOperators[\"AND\"] = \"AND\";\n    LogicalOperators[\"OR\"] = \"OR\";\n})($b4f6019a3c0f60c0$export$9a28c02ac0f6fc9d || ($b4f6019a3c0f60c0$export$9a28c02ac0f6fc9d = {}));\nconst $b4f6019a3c0f60c0$export$aa170efeb32c8cf9 = 13;\n\n\n\nconst $9ef97b21dccf4ee3$export$2104d4dd9d4984b2 = Object.freeze({\n    minX: -179,\n    maxX: 179,\n    minY: -89,\n    maxY: 89\n});\nconst $9ef97b21dccf4ee3$export$6db2f048e15a981e = Object.freeze({\n    minX: -20037500,\n    maxX: 20037500,\n    minY: -20048960,\n    maxY: 20048960 //  20048966.1\n});\nclass $9ef97b21dccf4ee3$export$5e01b9ff483562af {\n    constructor(apiUrl, gridSize, srid){\n        this.apiUrl = apiUrl;\n        this.gridSize = gridSize;\n        this.srid = srid;\n        if (this.srid == (0, $b4f6019a3c0f60c0$export$55fee9ea2526ad0d).EPSG4326) this.maxBounds = $9ef97b21dccf4ee3$export$2104d4dd9d4984b2;\n        else if (this.srid == (0, $b4f6019a3c0f60c0$export$55fee9ea2526ad0d).EPSG3857) this.maxBounds = $9ef97b21dccf4ee3$export$6db2f048e15a981e;\n        else throw new Error(`invalid srid given: ${this.srid} `);\n    }\n    validateZoom(zoom) {\n        if (!Number.isInteger(zoom)) throw new Error(`[anycluster] non-integer zoom: ${zoom}`);\n    }\n    async getGridCluster(zoom, data) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}grid/${zoom}/${this.gridSize}/`;\n        const clusters = await this.post(url, data);\n        return clusters;\n    }\n    async getKmeansCluster(zoom, data) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}kmeans/${zoom}/${this.gridSize}/`;\n        const clusters = await this.post(url, data);\n        return clusters;\n    }\n    async getKmeansClusterContent(zoom, data) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}get-kmeans-cluster-content/${zoom}/${this.gridSize}/`;\n        const clusterContent = await this.post(url, data);\n        return clusterContent;\n    }\n    async getDatasetContent(zoom, datasetId) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}get-dataset-content/${zoom}/${this.gridSize}/${datasetId}/`;\n        const clusterContent = await this.get(url);\n        return clusterContent;\n    }\n    async getMapContentCount(zoom, data) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}get-map-content-count/${zoom}/${this.gridSize}/`;\n        const mapContentCount = await this.post(url, data);\n        return mapContentCount;\n    }\n    async getGroupedMapContents(zoom, data) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}get-grouped-map-contents/${zoom}/${this.gridSize}/`;\n        const groupedMapContents = await this.post(url, data);\n        return groupedMapContents;\n    }\n    async getAreaContent(zoom, data) {\n        this.validateZoom(zoom);\n        const url = `${this.apiUrl}get-area-content/${zoom}/${this.gridSize}/`;\n        const areaContent = await this.post(url, data);\n        return areaContent;\n    }\n    viewportToGeoJSON(viewport) {\n        const left = Math.max(viewport.left, this.maxBounds.minX);\n        const right = Math.min(viewport.right, this.maxBounds.maxX);\n        const top = Math.min(viewport.top, this.maxBounds.maxY);\n        const bottom = Math.max(viewport.bottom, this.maxBounds.minY);\n        const geometryType = \"Polygon\";\n        const coordinates = [\n            [\n                [\n                    left,\n                    top\n                ],\n                [\n                    right,\n                    top\n                ],\n                [\n                    right,\n                    bottom\n                ],\n                [\n                    left,\n                    bottom\n                ],\n                [\n                    left,\n                    top\n                ]\n            ]\n        ];\n        const geoJSON = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": geometryType,\n                \"coordinates\": coordinates,\n                \"crs\": {\n                    \"type\": \"name\",\n                    \"properties\": {\n                        \"name\": this.srid\n                    }\n                }\n            }\n        };\n        return geoJSON;\n    }\n    async post(url, postData) {\n        const encodedUrl = encodeURI(url);\n        const options = {\n            method: \"POST\",\n            body: JSON.stringify(postData),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            mode: \"cors\",\n            credentials: \"include\"\n        };\n        const response = await fetch(encodedUrl, options);\n        const responseData = await response.json();\n        if (response.ok) return responseData;\n        else throw new Error(JSON.stringify(responseData));\n    }\n    async get(url) {\n        const encodedUrl = encodeURI(url);\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            mode: \"cors\",\n            credentials: \"include\"\n        };\n        const response = await fetch(encodedUrl, options);\n        const responseData = await response.json();\n        if (response.ok) return responseData;\n        else throw new Error(JSON.stringify(responseData));\n    }\n}\n\n\n\n\nconst $2a18f65d622cfe30$var$defaultGridFillColors = {\n    5: \"rgba(255, 192, 203, .5)\",\n    10: \"rgba(240, 128, 128, .5)\",\n    50: \"rgba(255, 127, 80, .5)\",\n    100: \"rgba(255, 165, 0, .5)\",\n    1000: \"rgba(255, 69, 0, .5)\",\n    10000: \"rgba(255, 0 , 0, .5)\"\n};\nconst $2a18f65d622cfe30$var$defaultGridStrokeColors = {\n    5: \"pink\",\n    10: \"lightcoral\",\n    50: \"coral\",\n    100: \"orange\",\n    1000: \"orangered\",\n    10000: \"red\"\n};\nclass $2a18f65d622cfe30$export$a09c19a7c4419c1 {\n    constructor(map, apiUrl, markerFolderPath, settings){\n        this.map = map;\n        this.apiUrl = apiUrl;\n        this.markerFolderPath = markerFolderPath;\n        this.filters = [];\n        this.isStartup = false // openlayers fires moveend after loadend. This triggers two clustering requests of which the latter has to be dismissed\n        ;\n        this.latestFilterChangeTimestamp = null;\n        this.map = map;\n        this.apiUrl = apiUrl;\n        this.markerFolderPath = markerFolderPath;\n        settings = settings || {};\n        // settings\n        this.srid = settings.srid ? settings.srid : (0, $b4f6019a3c0f60c0$export$55fee9ea2526ad0d).EPSG4326;\n        this.kmeansGridSize = settings.gridGridSize ? settings.gridGridSize : (0, $b4f6019a3c0f60c0$export$9c3a9f8fbf06a34).kmeans;\n        this.gridGridSize = settings.gridGridSize ? settings.gridGridSize : (0, $b4f6019a3c0f60c0$export$9c3a9f8fbf06a34).grid;\n        this.clusterMethod = settings.clusterMethod ? settings.clusterMethod : (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).kmeans;\n        this.geometryType = settings.geometryType ? settings.geometryType : (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).viewport;\n        this.area = settings.area ? settings.area : null;\n        this.iconType = settings.iconType ? settings.iconType : (0, $b4f6019a3c0f60c0$export$13ff1290a9e22e77).rounded;\n        this.singlePinImages = settings.singlePinImages ? settings.singlePinImages : {};\n        this.getSinglePinImageURL = settings.getSinglePinImageURL ? settings.getSinglePinImageURL : this._getSinglePinImageURL;\n        this.markerImageSizes = settings.markerImageSizes ? settings.markerImageSizes : (0, $b4f6019a3c0f60c0$export$96b1907ff7fa3578);\n        this.gridFillColors = settings.gridFillColors ? settings.gridFillColors : $2a18f65d622cfe30$var$defaultGridFillColors;\n        this.gridStrokeColors = settings.gridStrokeColors ? settings.gridStrokeColors : $2a18f65d622cfe30$var$defaultGridStrokeColors;\n        this.maxZoom = settings.maxZoom ? settings.maxZoom : (0, $b4f6019a3c0f60c0$export$aa170efeb32c8cf9);\n        // hooks\n        this.onGotClusters = settings.onGotClusters ? settings.onGotClusters : this._onGotClusters;\n        this.onFinalClick = settings.onFinalClick ? settings.onFinalClick : this._onFinalClick;\n        if (this.area) this.setArea(this.area);\n        const gridSize = this.getGridSize();\n        this.anycluster = new (0, $9ef97b21dccf4ee3$export$5e01b9ff483562af)(this.apiUrl, gridSize, this.srid);\n        this.createClusterLayers();\n        this.markerList = [];\n        const startClustering = settings.startClustering === false ? settings.startClustering : true;\n        if (startClustering === true) this.startClustering();\n    }\n    createClusterLayers() {\n        throw new Error(\"NotImplementedError: createClusterLayers\");\n    }\n    addArea(geojson) {\n        throw new Error(\"NotImplementedError: addArea\");\n    }\n    removeArea() {\n        throw new Error(\"NotImplementedError: removeArea\");\n    }\n    removeAllMarkers() {\n        throw new Error(\"NotImplementedError: removeAllMarkers\");\n    }\n    getZoom() {\n        throw new Error(\"NotImplementedError: getZoom\");\n    }\n    setMap(x, y, zoom) {\n        throw new Error(\"NotImplementedError: setMap\");\n    }\n    getViewport() {\n        throw new Error(\"NotImplementedError: setMap\");\n    }\n    addMapEventListeners() {\n        throw new Error(\"NotImplementedError: addMapEventListeners\");\n    }\n    drawKmeansMarker(cluster) {\n        throw new Error(\"NotImplementedError: drawKmeansMarker\");\n    }\n    drawCell(cluster) {\n        throw new Error(\"NotImplementedError: drawCell\");\n    }\n    drawGridMarker(cluster) {\n        throw new Error(\"NotImplementedError: drawGridMarker\");\n    }\n    getGridSize() {\n        if (this.clusterMethod == (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).grid) return this.gridGridSize;\n        return this.kmeansGridSize;\n    }\n    setClusterMethod(clusterMethod) {\n        if (clusterMethod == (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).grid) {\n            this.area = null;\n            this.geometryType = (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).viewport;\n            this.removeArea();\n        }\n        this.removeAllMarkers();\n        this.clusterMethod = clusterMethod;\n        const gridSize = this.getGridSize();\n        this.anycluster = new (0, $9ef97b21dccf4ee3$export$5e01b9ff483562af)(this.apiUrl, gridSize, this.srid);\n        this.markerList = [];\n        this.getClusters(true);\n    }\n    setArea(geojson) {\n        this.area = geojson;\n        this.removeArea();\n        if (geojson == null) {\n            this.geometryType = (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).viewport;\n            this.setClusterMethod((0, $b4f6019a3c0f60c0$export$ae91e066970d978a).kmeans);\n        } else {\n            this.addArea(geojson);\n            this.geometryType = (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).area;\n            this.setClusterMethod((0, $b4f6019a3c0f60c0$export$ae91e066970d978a).kmeans);\n        }\n    }\n    _getSinglePinImageURL(cluster) {\n        const pinimg = cluster.pinimg;\n        let url = `${this.markerFolderPath}pin_unknown.png`;\n        if (this.singlePinImages && pinimg && pinimg in this.singlePinImages) url = this.singlePinImages[pinimg];\n        return url;\n    }\n    selectPinIcon(cluster) {\n        const count = cluster.count;\n        let markerImageUrl = this.getSinglePinImageURL(cluster);\n        let pinicon = \"1\";\n        if (count > 10000) pinicon = \"10000\";\n        else if (count > 1000) pinicon = \"1000\";\n        else if (count > 100) pinicon = \"100\";\n        else if (count > 50) pinicon = \"50\";\n        else if (count > 10) pinicon = \"10\";\n        else if (count > 1) pinicon = \"5\";\n        if (count > 1) {\n            if (this.iconType == (0, $b4f6019a3c0f60c0$export$13ff1290a9e22e77).exact) markerImageUrl = `${this.markerFolderPath}${pinicon}_empty.png`;\n            else markerImageUrl = `${this.markerFolderPath}${pinicon}.png`;\n        }\n        const size = this.markerImageSizes[pinicon];\n        let anchor = [\n            Math.round(size[0] / 2),\n            size[1] - 1\n        ];\n        let relativeAnchor = [\n            0.5,\n            1\n        ];\n        if (count > 1) {\n            anchor = [\n                Math.round(size[0] / 2),\n                Math.round(size[1] / 2)\n            ];\n            relativeAnchor = [\n                0.5,\n                0.5\n            ];\n        }\n        const imgObj = {\n            url: markerImageUrl,\n            size: size,\n            anchor: anchor,\n            relativeAnchor: relativeAnchor,\n            popupAnchor: [\n                0,\n                -Math.round(size[1]) + 8\n            ]\n        };\n        return imgObj;\n    }\n    // marker can be an openlayers Feature or a L.marker\n    setMarkerProps(marker, cluster) {\n        // add properties required by anycluster\n        marker.x = cluster.center.x;\n        marker.y = cluster.center.y;\n        marker.count = cluster.count;\n        marker.ids = cluster.ids;\n        return marker;\n    }\n    setCellProps(cell, cluster) {\n        cell.x = cluster.center.x;\n        cell.y = cluster.center.y;\n        cell.count = cluster.count;\n        cell.id = cluster.id;\n        cell.geojson = cluster.geojson;\n        return cell;\n    }\n    markerClickFunction(x, y) {\n        this.removeAllMarkers();\n        let zoom = this.getZoom();\n        zoom = zoom + 3;\n        this.setMap(x, y, zoom);\n    }\n    async onMarkerFinalClick(marker) {\n        const zoom = this.getZoom();\n        const x = marker.x;\n        const y = marker.y;\n        if (this.clusterMethod == (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).kmeans) {\n            const ids = marker.ids;\n            const postData = {\n                \"geometry_type\": this.geometryType,\n                \"input_srid\": this.srid,\n                \"x\": x,\n                \"y\": y,\n                \"ids\": ids,\n                \"filters\": this.filters\n            };\n            const data = await this.anycluster.getKmeansClusterContent(zoom, postData);\n            this.onFinalClick(marker, data);\n        } else if (this.clusterMethod = (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).grid) {\n            if (marker.count == 1) {\n                const data = await this.anycluster.getDatasetContent(zoom, marker.id);\n                this.onFinalClick(marker, data);\n            } else {\n                const geojson = marker[\"geojson\"];\n                const zoom = this.getZoom();\n                const data = await this.anycluster.getAreaContent(zoom, geojson);\n                this.onFinalClick(marker, data);\n            }\n        }\n    }\n    roundMarkerCount(count) {\n        if (count == 1) count = 1;\n        else if (count <= 5) count = 5;\n        else if (count <= 10) count = 10;\n        else if (count <= 50) count = 50;\n        else if (count <= 100) count = 100;\n        else if (count <= 1000) count = 1000;\n        else count = 10000;\n        return count;\n    }\n    getClusterGeometry() {\n        let geoJSON;\n        if (this.geometryType == (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).viewport) {\n            const viewport = this.getViewport();\n            geoJSON = this.anycluster.viewportToGeoJSON(viewport);\n        } else if (this.geometryType == (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).area && this.area) geoJSON = this.area;\n        else throw new Error(\"No cluster geometry found\");\n        return geoJSON;\n    }\n    async getClusters(clearCache = false) {\n        const geoJSON = this.getClusterGeometry();\n        const postData = {\n            \"output_srid\": this.srid,\n            \"geometry_type\": this.geometryType,\n            \"geojson\": geoJSON,\n            \"clear_cache\": clearCache,\n            \"filters\": this.filters\n        };\n        const zoom = this.getZoom();\n        const filterTimestamp = this.latestFilterChangeTimestamp;\n        if (this.clusterMethod == (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).kmeans) {\n            const clusters = await this.anycluster.getKmeansCluster(zoom, postData);\n            const postResponseZoom = this.getZoom();\n            // only draw markers/cells if the user did not zoom or change filters during the wait for the response\n            if (clusters.length > 0 && filterTimestamp === this.latestFilterChangeTimestamp && zoom === postResponseZoom) {\n                clusters.forEach((cluster)=>{\n                    this.drawKmeansMarker(cluster);\n                });\n                this.onGotClusters();\n            } else console.log(`[anycluster]: not drawing markers because of outdated response`);\n        } else if (this.clusterMethod == (0, $b4f6019a3c0f60c0$export$ae91e066970d978a).grid) {\n            const clusters = await this.anycluster.getGridCluster(zoom, postData);\n            const postResponseZoom = this.getZoom();\n            // only draw markers/cells if the user did not zoom or change filters during the wait for the response\n            if (clusters.length > 0 && filterTimestamp === this.latestFilterChangeTimestamp && zoom === postResponseZoom) {\n                clusters.forEach((cluster)=>{\n                    this.drawCell(cluster);\n                });\n                this.onGotClusters();\n            } else console.log(`[anycluster]: not drawing markers because of outdated response`);\n        } else throw new Error(`Invalid clusterMethod: ${this.clusterMethod}`);\n    }\n    async startClustering() {\n        this.isStartup = true;\n        await this.getClusters(true);\n        this.addMapEventListeners();\n        this.isStartup = false;\n    }\n    filtersAreEqual(filter1, filter2) {\n        if (\"column\" in filter1 && \"column\" in filter2) {\n            if (filter1.column == filter2.column && filter1.value == filter2.value && filter1.operator == filter2.operator) return true;\n        } else if (JSON.stringify(filter1) === JSON.stringify(filter2)) return true;\n        return false;\n    }\n    // filtering\n    filter(filter, reloadMarkers) {\n        if (Array.isArray(filter)) this.filters = filter;\n        else this.filters = [\n            filter\n        ];\n        this.postFilterChange(reloadMarkers);\n    }\n    addFilter(filter, reloadMarkers) {\n        let filterExists = false;\n        for(let f = 0; f < this.filters.length; f++){\n            let existingFilter = this.filters[f];\n            if (this.filtersAreEqual(filter, existingFilter)) {\n                filterExists = true;\n                break;\n            }\n        }\n        if (!filterExists) this.filters.push(filter);\n        this.postFilterChange(reloadMarkers);\n    }\n    addFilters(filtersToAdd, reloadMarkers) {\n        for(let fa = 0; fa < filtersToAdd.length; fa++){\n            let filter = filtersToAdd[fa];\n            this.addFilter(filter, false);\n        }\n        this.postFilterChange(reloadMarkers);\n    }\n    removeFilter(filter, reloadMarkers) {\n        for(let f = 0; f < this.filters.length; f++){\n            let existingFilter = this.filters[f];\n            if (this.filtersAreEqual(filter, existingFilter)) {\n                this.filters.splice(f, 1);\n                break;\n            }\n        }\n        this.postFilterChange(reloadMarkers);\n    }\n    removeFilters(filtersToRemove, reloadMarkers) {\n        for(let fr = 0; fr < filtersToRemove.length; fr++){\n            let filter = filtersToRemove[fr];\n            this.removeFilter(filter, false);\n        }\n        this.postFilterChange(reloadMarkers);\n    }\n    resetFilters(reloadMarkers) {\n        this.filters = [];\n        this.postFilterChange(reloadMarkers);\n    }\n    postFilterChange(reloadMarkers) {\n        this.latestFilterChangeTimestamp = new Date().getTime();\n        if (reloadMarkers != false) reloadMarkers = true;\n        if (reloadMarkers == true) {\n            this.removeAllMarkers();\n            this.getClusters(true);\n        }\n    }\n    /**\n   * method for getting the unaggregated, paginated content of the map\n   */ async getMapContents(limit, offset, orderBy) {\n        const geoJSON = this.getClusterGeometry();\n        const zoom = this.getZoom();\n        const postData = {\n            \"output_srid\": this.srid,\n            \"geometry_type\": (0, $b4f6019a3c0f60c0$export$8f4397a63c3cef66).area,\n            \"geojson\": geoJSON,\n            \"clear_cache\": false,\n            \"filters\": this.filters,\n            \"limit\": limit,\n            \"offset\": offset,\n            \"order_by\": orderBy\n        };\n        const data = this.anycluster.getAreaContent(zoom, postData);\n        return data;\n    }\n    /**\n   * methods for getting counts of objects on the current map / geometry\n   */ async getMapContentCount(modulations) {\n        const geoJSON = this.getClusterGeometry();\n        const postData = {\n            \"output_srid\": this.srid,\n            \"geometry_type\": this.geometryType,\n            \"geojson\": geoJSON,\n            \"clear_cache\": true,\n            \"filters\": this.filters,\n            \"modulations\": modulations\n        };\n        const zoom = this.getZoom();\n        const data = await this.anycluster.getMapContentCount(zoom, postData);\n        return data;\n    }\n    async getFilteredMapContentCount(filters, modulations) {\n        const geoJSON = this.getClusterGeometry();\n        const postData = {\n            \"output_srid\": this.srid,\n            \"geometry_type\": this.geometryType,\n            \"geojson\": geoJSON,\n            \"clear_cache\": true,\n            \"filters\": filters,\n            \"modulations\": modulations\n        };\n        const zoom = this.getZoom();\n        const data = await this.anycluster.getMapContentCount(zoom, postData);\n        return data;\n    }\n    async getGroupedMapContents(groupBy) {\n        const geoJSON = this.getClusterGeometry();\n        const postData = {\n            \"output_srid\": this.srid,\n            \"geometry_type\": this.geometryType,\n            \"geojson\": geoJSON,\n            \"clear_cache\": true,\n            \"filters\": this.filters,\n            \"group_by\": groupBy\n        };\n        const zoom = this.getZoom();\n        const data = await this.anycluster.getGroupedMapContents(zoom, postData);\n        return data;\n    }\n    async getFilteredGroupedMapContents(filters, groupBy) {\n        const geoJSON = this.getClusterGeometry();\n        const postData = {\n            \"output_srid\": this.srid,\n            \"geometry_type\": this.geometryType,\n            \"geojson\": geoJSON,\n            \"clear_cache\": true,\n            \"filters\": filters,\n            \"group_by\": groupBy\n        };\n        const zoom = this.getZoom();\n        const data = await this.anycluster.getGroupedMapContents(zoom, postData);\n        return data;\n    }\n    // hooks\n    _onFinalClick(marker, data) {\n        alert(JSON.stringify(data));\n    }\n    _onGotClusters() {}\n}\n\n\n\n\nexport {$b4f6019a3c0f60c0$export$ae91e066970d978a as ClusterMethod, $b4f6019a3c0f60c0$export$8f4397a63c3cef66 as GeometryType, $b4f6019a3c0f60c0$export$13ff1290a9e22e77 as IconType, $b4f6019a3c0f60c0$export$55fee9ea2526ad0d as SRIDS, $b4f6019a3c0f60c0$export$7fa100a28fbb5fe2 as Operators, $b4f6019a3c0f60c0$export$9a28c02ac0f6fc9d as LogicalOperators, $9ef97b21dccf4ee3$export$5e01b9ff483562af as Anycluster, $9ef97b21dccf4ee3$export$6db2f048e15a981e as Bounds3857, $9ef97b21dccf4ee3$export$2104d4dd9d4984b2 as Bounds4326, $2a18f65d622cfe30$export$a09c19a7c4419c1 as AnyclusterClient};\n//# sourceMappingURL=anycluster.js.map\n","export {\n    ClusterMethod,\n    GeometryType,\n    IconType,\n    SRIDS,\n    Operators,\n    LogicalOperators,\n} from \"./consts\";\n\nexport { \n    Anycluster,\n    Bounds3857,\n    Bounds4326,\n} from \"./anycluster\";\n\nexport type {\n    Filter,\n    GetKmeansClusterContentRequestData,\n    ClusterRequestData,\n    MapContentCountRequestData,\n    GroupedMapContentRequestData,\n    AreaContentRequestData,\n    FilterList,\n    NestedFilter,\n    FilterOrNestedFilter,\n    FilterOrNestedFilterList,\n    Modulations,\n} from \"./anycluster\";\n\nexport {\n    AnyclusterClient,\n} from \"./anycluster-client\";\n\nexport type {\n    AnyclusterClientSettings\n} from \"./anycluster-client\";\n\nexport type {\n    GeoJSON,\n    Marker,\n    Viewport,\n} from \"./geometry\";\n\nexport type {\n    KmeansCluster,\n    KmeansClusterResponse,\n    GridCluster,\n} from \"./types\";","\nexport interface MaxBounds {\n    minX: number,\n    maxX: number,\n    minY: number,\n    maxY: number\n}\n\nexport enum SRIDS {\n    EPSG4326 = 'EPSG:4326',\n    EPSG3857 = 'EPSG:3857'\n}\n\nexport enum ClusterMethod {\n    kmeans = 'kmeans',\n    grid = 'grid'\n}\n\n\nexport enum GeometryType {\n    viewport = 'viewport',\n    area = 'area'\n}\n\nexport enum IconType {\n    exact = 'exact',\n    rounded = 'rounded'\n}\n\nexport enum DefaultGridSizes {\n    grid = 64,\n    kmeans = 150\n}\n\nexport const DefaultMarkerImageSizes = {\n    1: [24, 39],\n    5: [30, 30],\n    10: [30, 30],\n    50: [40, 40],\n    100: [40, 40],\n    1000: [50, 50],\n    10000: [60, 60]\n}\n\nexport enum Operators {\n    in = 'in',\n    notIn = 'not in',\n    equals = '=',\n    unEquals = '!=',\n    largerThan = '>=',\n    smallerThan = '<=',\n    startswith = 'startswith',\n    contains = 'contains',\n}\n\nexport enum LogicalOperators {\n    AND = 'AND',\n    OR = 'OR',\n}\n\nexport const DefaultMaxZoom = 13;","import { SRIDS, MaxBounds, ClusterMethod, GeometryType, Operators, LogicalOperators } from \"./consts\";\nimport { Point, GeoJSON, Coordinates, Viewport } from \"./geometry\";\nimport type { KmeansClusterResponse } from \"./types\";\n\nexport const Bounds4326: MaxBounds = Object.freeze({\n    minX: -179,\n    maxX: 179,\n    minY: -89,\n    maxY: 89\n});\n\n\nexport const Bounds3857: MaxBounds = Object.freeze({\n    minX: -20037500, //-20037508.34\n    maxX: 20037500, // 20037508.34\n    minY: -20048960, // -20048966.1\n    maxY: 20048960 //  20048966.1\n});\n\nexport interface Filter {\n    column: string\n    value: string | number | boolean\n    operator: Operators\n    logicalOperator?: LogicalOperators\n}\n\nexport interface NestedFilter {\n    filters : Filter[]\n    logicalOperator?: LogicalOperators\n}\n\nexport type FilterOrNestedFilter = Filter | NestedFilter;\n\nexport interface ClusterRequestData {\n    output_srid: SRIDS\n    geometry_type: GeometryType\n    geojson: GeoJSON\n    clear_cache: boolean\n    filters: FilterOrNestedFilter[]\n}\n\nexport type FilterList = Filter[];\n\nexport type FilterOrNestedFilterList = FilterOrNestedFilter[];\n\nexport interface GetKmeansClusterContentRequestData {\n    geometry_type: GeometryType\n    input_srid: SRIDS\n    x: number\n    y: number\n    ids: number[]\n}\n\nexport interface Modulations {\n    [name:string] : FilterOrNestedFilter | FilterOrNestedFilterList\n}\n\nexport interface MapContentCountRequestData extends ClusterRequestData {\n    modulations?: Modulations\n}\n\nexport interface AreaContentRequestData extends ClusterRequestData {\n    limit?: number\n    offset?: number\n    order_by?: string\n}\n\nexport interface GroupedMapContentRequestData extends ClusterRequestData {\n    group_by: string\n}\n\nexport class Anycluster {\n\n    maxBounds: MaxBounds\n\n    constructor(private apiUrl: string, public gridSize: number, public srid: SRIDS) {\n\n        if (this.srid == SRIDS.EPSG4326) {\n            this.maxBounds = Bounds4326;\n        }\n        else if (this.srid == SRIDS.EPSG3857) {\n            this.maxBounds = Bounds3857;\n        }\n        else {\n            throw new Error(`invalid srid given: ${this.srid} `);\n        }\n\n    }\n\n    validateZoom(zoom: number) {\n        if (!Number.isInteger(zoom)) {\n            throw new Error(`[anycluster] non-integer zoom: ${zoom}`);\n        }\n    }\n\n    async getGridCluster(zoom: number, data: ClusterRequestData) {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}grid/${zoom}/${this.gridSize}/`;\n        const clusters = await this.post(url, data);\n        return clusters;\n    }\n\n    async getKmeansCluster(zoom: number, data: ClusterRequestData): Promise<KmeansClusterResponse> {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}kmeans/${zoom}/${this.gridSize}/`;\n        const clusters = await this.post(url, data);\n        return clusters;\n    }\n\n    async getKmeansClusterContent(zoom: number, data: GetKmeansClusterContentRequestData) {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}get-kmeans-cluster-content/${zoom}/${this.gridSize}/`;\n\n        const clusterContent = await this.post(url, data);\n\n        return clusterContent;\n    }\n\n    async getDatasetContent(zoom: number, datasetId: number) {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}get-dataset-content/${zoom}/${this.gridSize}/${datasetId}/`;\n\n        const clusterContent = await this.get(url);\n\n        return clusterContent;\n    }\n\n    async getMapContentCount(zoom: number, data: MapContentCountRequestData) {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}get-map-content-count/${zoom}/${this.gridSize}/`;\n\n        const mapContentCount = await this.post(url, data)\n\n        return mapContentCount;\n    }\n\n    async getGroupedMapContents(zoom: number, data: GroupedMapContentRequestData) {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}get-grouped-map-contents/${zoom}/${this.gridSize}/`;\n\n        const groupedMapContents = await this.post(url, data);\n\n        return groupedMapContents;\n\n    }\n\n    async getAreaContent(zoom:number, data: AreaContentRequestData) {\n\n        this.validateZoom(zoom);\n\n        const url = `${this.apiUrl}get-area-content/${zoom}/${this.gridSize}/`;\n\n        const areaContent = await this.post(url, data);\n\n        return areaContent;\n    }\n\n    viewportToGeoJSON(viewport: Viewport) {\n\n        const left = Math.max(viewport.left, this.maxBounds.minX);\n        const right = Math.min(viewport.right, this.maxBounds.maxX);\n        const top = Math.min(viewport.top, this.maxBounds.maxY);\n        const bottom = Math.max(viewport.bottom, this.maxBounds.minY);\n\n        const geometryType = \"Polygon\";\n\n        const coordinates = [[\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n            [left, top]\n        ]];\n\n        const geoJSON = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n                \"type\": geometryType,\n                \"coordinates\": coordinates,\n                \"crs\": {\n                    \"type\": \"name\",\n                    \"properties\": {\n                        \"name\": this.srid\n                    }\n                }\n            }\n        };\n\n        return geoJSON;\n    }\n\n    async post(url: string, postData: object) {\n\n        const encodedUrl = encodeURI(url);\n\n        const options = {\n            method: 'POST',\n            body: JSON.stringify(postData),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors' as 'cors',\n            credentials: 'include' as 'include'\n        }\n\n        const response = await fetch(encodedUrl, options);\n        const responseData = await response.json();\n\n        if (response.ok) {\n            return responseData\n        }\n        else {\n            throw new Error(JSON.stringify(responseData));\n        }\n\n    }\n\n    async get(url: string) {\n        const encodedUrl = encodeURI(url);\n\n        const options = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors' as 'cors',\n            credentials: 'include' as 'include'\n        }\n\n        const response = await fetch(encodedUrl, options);\n        const responseData = await response.json();\n\n        if (response.ok) {\n            return responseData\n        }\n        else {\n            throw new Error(JSON.stringify(responseData));\n        }\n    }\n}","\nimport { ClusterMethod, GeometryType, IconType, SRIDS, DefaultGridSizes, DefaultMarkerImageSizes, DefaultMaxZoom } from \"./consts\";\nimport type { GeoJSON, Marker, Viewport } from \"./geometry\";\nimport type { GridCluster, KmeansCluster } from \"./types\";\nimport {\n  Anycluster,\n  GetKmeansClusterContentRequestData,\n  ClusterRequestData,\n  MapContentCountRequestData,\n  GroupedMapContentRequestData,\n  AreaContentRequestData,\n  Filter,\n  FilterList,\n  NestedFilter,\n  FilterOrNestedFilter,\n  FilterOrNestedFilterList,\n  Modulations,\n} from \"./anycluster\";\n\nconst defaultGridFillColors = {\n  5: \"rgba(255, 192, 203, .5)\",\n  10: \"rgba(240, 128, 128, .5)\",\n  50: \"rgba(255, 127, 80, .5)\",\n  100: \"rgba(255, 165, 0, .5)\",\n  1000: \"rgba(255, 69, 0, .5)\",\n  10000: \"rgba(255, 0 , 0, .5)\",\n};\n\nconst defaultGridStrokeColors = {\n  5: \"pink\",\n  10: \"lightcoral\",\n  50: \"coral\",\n  100: \"orange\",\n  1000: \"orangered\",\n  10000: \"red\",\n};\n\nexport interface AnyclusterClientSettings {\n  srid?: SRIDS // srid of the map\n  kmeansGridSize?: number\n  gridGridSize?: number\n  clusterMethod?: ClusterMethod\n  geometryType?: GeometryType\n  area?: any\n  iconType?: IconType\n  maxZoom?: number,\n  onFinalClick?: Function\n  singlePinImages?: Record<string, string>\n  getSinglePinImageURL?: Function\n  markerImageSizes?: Record<string, number[]>\n  gridFillColors?: Record<number, string>\n  gridStrokeColors?: Record<number, string>\n  onGotClusters?: () => void\n  startClustering?: boolean\n}\n\nexport class AnyclusterClient {\n\n  srid: SRIDS\n  kmeansGridSize: number\n  gridGridSize: number\n  clusterMethod: ClusterMethod\n  geometryType: GeometryType\n\n  area: GeoJSON | null\n  iconType: IconType\n\n  anycluster: Anycluster\n  markerList: any[]\n  maxZoom: number\n  onFinalClick: Function\n  onGotClusters: Function\n  singlePinImages?: Record<string, string>\n  getSinglePinImageURL: Function\n\n  markerImageSizes: Record<string, number[]>\n\n  gridFillColors: Record<number, string>\n  gridStrokeColors: Record<number, string>\n\n  filters: FilterOrNestedFilterList = []\n\n  isStartup: boolean = false // openlayers fires moveend after loadend. This triggers two clustering requests of which the latter has to be dismissed\n  latestFilterChangeTimestamp: number | null = null\n\n  constructor(public map: any, public apiUrl: string, public markerFolderPath: string, settings: AnyclusterClientSettings) {\n\n    this.map = map;\n    this.apiUrl = apiUrl;\n    this.markerFolderPath = markerFolderPath;\n\n    settings = settings || {};\n\n\n    // settings\n    this.srid = settings.srid ? settings.srid : SRIDS.EPSG4326;\n    this.kmeansGridSize = settings.gridGridSize ? settings.gridGridSize : DefaultGridSizes.kmeans;\n    this.gridGridSize = settings.gridGridSize ? settings.gridGridSize : DefaultGridSizes.grid;\n\n    this.clusterMethod = settings.clusterMethod ? settings.clusterMethod : ClusterMethod.kmeans;\n    this.geometryType = settings.geometryType ? settings.geometryType : GeometryType.viewport;\n\n    this.area = settings.area ? settings.area : null;\n    this.iconType = settings.iconType ? settings.iconType : IconType.rounded;\n\n    this.singlePinImages = settings.singlePinImages ? settings.singlePinImages : {};\n    this.getSinglePinImageURL = settings.getSinglePinImageURL ? settings.getSinglePinImageURL : this._getSinglePinImageURL;\n\n    this.markerImageSizes = settings.markerImageSizes ? settings.markerImageSizes : DefaultMarkerImageSizes;\n\n    this.gridFillColors = settings.gridFillColors ? settings.gridFillColors : defaultGridFillColors;\n    this.gridStrokeColors = settings.gridStrokeColors ? settings.gridStrokeColors : defaultGridStrokeColors;\n\n    this.maxZoom = settings.maxZoom ? settings.maxZoom : DefaultMaxZoom;\n    // hooks\n    this.onGotClusters = settings.onGotClusters ? settings.onGotClusters : this._onGotClusters;\n    this.onFinalClick = settings.onFinalClick ? settings.onFinalClick : this._onFinalClick;\n\n\n    if (this.area) {\n      this.setArea(this.area);\n    }\n\n    const gridSize = this.getGridSize();\n    this.anycluster = new Anycluster(this.apiUrl, gridSize, this.srid);\n\n    this.createClusterLayers();\n    this.markerList = [];\n\n    const startClustering = settings.startClustering === false ? settings.startClustering : true;\n\n    if (startClustering === true) {\n      this.startClustering();\n    }\n  }\n\n  createClusterLayers(): void {\n    throw new Error(\"NotImplementedError: createClusterLayers\");\n  }\n\n  addArea(geojson: object): void {\n    throw new Error(\"NotImplementedError: addArea\");\n  }\n\n  removeArea(): void {\n    throw new Error(\"NotImplementedError: removeArea\");\n  }\n\n  removeAllMarkers(): void {\n    throw new Error(\"NotImplementedError: removeAllMarkers\");\n  }\n\n  getZoom(): number {\n    throw new Error(\"NotImplementedError: getZoom\");\n  }\n\n  setMap(x: number, y: number, zoom: number): void {\n    throw new Error(\"NotImplementedError: setMap\");\n  }\n\n  getViewport(): Viewport {\n    throw new Error(\"NotImplementedError: setMap\");\n  }\n\n  addMapEventListeners(): void {\n    throw new Error(\"NotImplementedError: addMapEventListeners\");\n  }\n\n  drawKmeansMarker(cluster: KmeansCluster): void {\n    throw new Error(\"NotImplementedError: drawKmeansMarker\");\n  }\n\n  drawCell(cluster: GridCluster): void {\n    throw new Error(\"NotImplementedError: drawCell\");\n  }\n\n  drawGridMarker(cluster: GridCluster): void {\n    throw new Error(\"NotImplementedError: drawGridMarker\");\n  }\n\n  getGridSize(): number {\n    if (this.clusterMethod == ClusterMethod.grid) {\n      return this.gridGridSize;\n    }\n\n    return this.kmeansGridSize;\n  }\n\n  setClusterMethod(clusterMethod: ClusterMethod) {\n\n    if (clusterMethod == ClusterMethod.grid) {\n      this.area = null;\n      this.geometryType = GeometryType.viewport;\n      this.removeArea();\n    }\n\n    this.removeAllMarkers();\n    this.clusterMethod = clusterMethod;\n    const gridSize = this.getGridSize();\n    this.anycluster = new Anycluster(this.apiUrl, gridSize, this.srid);\n    this.markerList = [];\n    this.getClusters(true);\n  }\n\n  setArea(geojson: GeoJSON) {\n\n    this.area = geojson;\n\n    this.removeArea();\n\n    if (geojson == null) {\n      this.geometryType = GeometryType.viewport;\n      this.setClusterMethod(ClusterMethod.kmeans);\n    }\n    else {\n\n      this.addArea(geojson);\n\n      this.geometryType = GeometryType.area;\n\n      this.setClusterMethod(ClusterMethod.kmeans);\n    }\n  }\n\n  _getSinglePinImageURL(cluster: KmeansCluster | GridCluster) {\n\n    const pinimg = cluster.pinimg;\n\n    let url = `${this.markerFolderPath}pin_unknown.png`;\n\n    if (this.singlePinImages && pinimg && pinimg in this.singlePinImages) {\n      url = this.singlePinImages[pinimg];\n    }\n\n    return url\n\n  }\n\n  selectPinIcon(cluster: KmeansCluster | GridCluster) {\n\n    const count = cluster.count;\n\n    let markerImageUrl = this.getSinglePinImageURL(cluster);\n    let pinicon = \"1\";\n\n    if (count > 10000) {\n      pinicon = \"10000\";\n    }\n\n    else if (count > 1000) {\n      pinicon = \"1000\";\n    }\n\n    else if (count > 100) {\n      pinicon = \"100\";\n    }\n\n    else if (count > 50) {\n      pinicon = \"50\";\n    }\n\n    else if (count > 10) {\n      pinicon = \"10\";\n    }\n\n    else if (count > 1) {\n      pinicon = \"5\";\n    }\n\n    if (count > 1) {\n      if (this.iconType == IconType.exact) {\n        markerImageUrl = `${this.markerFolderPath}${pinicon}_empty.png`;\n      }\n      else {\n        markerImageUrl = `${this.markerFolderPath}${pinicon}.png`;\n      }\n    }\n\n    const size = this.markerImageSizes[pinicon];\n    let anchor = [Math.round(size[0] / 2), size[1] - 1];\n    let relativeAnchor = [0.5, 1];\n\n    if (count > 1) {\n      anchor = [Math.round((size[0] / 2)), Math.round(size[1] / 2)];\n      relativeAnchor = [0.5, 0.5];\n    }\n\n    const imgObj = {\n      url: markerImageUrl,\n      size: size,\n      anchor: anchor,\n      relativeAnchor: relativeAnchor,\n      popupAnchor: [0, -Math.round(size[1]) + 8]\n    }\n\n    return imgObj;\n\n  }\n\n  // marker can be an openlayers Feature or a L.marker\n  setMarkerProps(marker: any, cluster: KmeansCluster) {\n\n    // add properties required by anycluster\n    marker.x = cluster.center.x;\n    marker.y = cluster.center.y;\n    marker.count = cluster.count;\n    marker.ids = cluster.ids;\n\n    return marker;\n\n  }\n\n  setCellProps(cell: any, cluster: GridCluster) {\n    cell.x = cluster.center.x;\n    cell.y = cluster.center.y;\n    cell.count = cluster.count;\n    cell.id = cluster.id;\n    cell.geojson = cluster.geojson;\n\n    return cell;\n  }\n\n  markerClickFunction(x: number, y: number) {\n    this.removeAllMarkers();\n    let zoom = this.getZoom();\n    zoom = zoom + 3;\n    this.setMap(x, y, zoom);\n  }\n\n  async onMarkerFinalClick(marker: any) {\n\n    const zoom = this.getZoom();\n    const x = marker.x;\n    const y = marker.y;\n\n    if (this.clusterMethod == ClusterMethod.kmeans) {\n\n      const ids = marker.ids;\n      \n      const postData = {\n        \"geometry_type\": this.geometryType,\n        \"input_srid\": this.srid,\n        \"x\": x,\n        \"y\": y,\n        \"ids\": ids,\n        \"filters\": this.filters\n      } as GetKmeansClusterContentRequestData;\n\n      const data = await this.anycluster.getKmeansClusterContent(zoom, postData);\n\n      this.onFinalClick(marker, data);\n\n    }\n    else if (this.clusterMethod = ClusterMethod.grid) {\n\n      if (marker.count == 1) {\n        const data = await this.anycluster.getDatasetContent(zoom, marker.id);\n        this.onFinalClick(marker, data);\n      }\n      else {\n        const geojson = marker[\"geojson\"];\n        const zoom = this.getZoom();\n        const data = await this.anycluster.getAreaContent(zoom, geojson);\n\n        this.onFinalClick(marker, data);\n      }\n\n    }\n  }\n\n  roundMarkerCount(count: number): number {\n\n    if (count == 1) {\n      count = 1;\n    }\n    else if (count <= 5) {\n      count = 5;\n    }\n    else if (count <= 10) {\n      count = 10;\n    }\n    else if (count <= 50) {\n      count = 50;\n    }\n    else if (count <= 100) {\n      count = 100;\n    }\n    else if (count <= 1000) {\n      count = 1000;\n    }\n    else {\n      count = 10000;\n    }\n\n    return count;\n  }\n\n  getClusterGeometry() {\n    let geoJSON;\n\n    if (this.geometryType == GeometryType.viewport) {\n      const viewport = this.getViewport();\n      geoJSON = this.anycluster.viewportToGeoJSON(viewport);\n    }\n    else if (this.geometryType == GeometryType.area && this.area) {\n      geoJSON = this.area;\n    }\n    else {\n      throw new Error('No cluster geometry found');\n    }\n\n    return geoJSON;\n\n  }\n\n  async getClusters(clearCache = false) {\n\n    const geoJSON = this.getClusterGeometry()\n\n    const postData = {\n      \"output_srid\": this.srid,\n      \"geometry_type\": this.geometryType,\n      \"geojson\": geoJSON,\n      \"clear_cache\": clearCache,\n      \"filters\": this.filters\n    } as ClusterRequestData;\n\n    const zoom = this.getZoom();\n    const filterTimestamp = this.latestFilterChangeTimestamp;\n\n    if (this.clusterMethod == ClusterMethod.kmeans) {\n      const clusters: KmeansCluster[] = await this.anycluster.getKmeansCluster(zoom, postData);\n      const postResponseZoom = this.getZoom();\n      // only draw markers/cells if the user did not zoom or change filters during the wait for the response\n      if (clusters.length > 0 && filterTimestamp === this.latestFilterChangeTimestamp && zoom === postResponseZoom) {\n        clusters.forEach(cluster => {\n          this.drawKmeansMarker(cluster);\n        });\n\n        this.onGotClusters();\n      } else {\n        console.log(`[anycluster]: not drawing markers because of outdated response`);\n      }\n\n    } else if (this.clusterMethod == ClusterMethod.grid ) {\n      const clusters: GridCluster[] = await this.anycluster.getGridCluster(zoom, postData);\n      const postResponseZoom = this.getZoom();\n\n      // only draw markers/cells if the user did not zoom or change filters during the wait for the response\n      if (clusters.length > 0 && filterTimestamp === this.latestFilterChangeTimestamp && zoom === postResponseZoom) {\n        clusters.forEach(cluster => {\n            this.drawCell(cluster);\n        });\n\n        this.onGotClusters();\n      } else {\n        console.log(`[anycluster]: not drawing markers because of outdated response`);\n      }\n    } else {\n      throw new Error(`Invalid clusterMethod: ${this.clusterMethod}`);\n    }\n  }\n\n  async startClustering() {\n    this.isStartup = true;\n    await this.getClusters(true);\n    this.addMapEventListeners();\n    this.isStartup = false;\n  }\n\n  filtersAreEqual(filter1: FilterOrNestedFilter, filter2: FilterOrNestedFilter): boolean {\n    if ('column' in filter1 && 'column' in filter2) {\n      if (filter1.column == filter2.column && filter1.value == filter2.value && filter1.operator == filter2.operator) {\n        return true;\n      }\n    }\n    // testing with json.stringify is not ideal because {\"a\":1,\"b\":2} === {\"b\":2,\"a\":1} returns false\n    else if (JSON.stringify(filter1) === JSON.stringify(filter2)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // filtering\n  filter(filter: Filter | NestedFilter | FilterOrNestedFilter[], reloadMarkers?: boolean) {\n\n    if (Array.isArray(filter)) {\n      this.filters = filter;\n    }\n    else {\n      this.filters = [filter];\n    }\n    this.postFilterChange(reloadMarkers);\n  }\n\n  addFilter(filter: Filter, reloadMarkers?: boolean) {\n\n    let filterExists = false;\n\n    for (let f = 0; f < this.filters.length; f++) {\n      let existingFilter: FilterOrNestedFilter = this.filters[f];\n\n      if (this.filtersAreEqual(filter, existingFilter)) {\n        filterExists = true;\n        break;\n      }\n\n    }\n\n    if (!filterExists) {\n      this.filters.push(filter);\n    }\n\n    this.postFilterChange(reloadMarkers);\n  }\n\n  addFilters(filtersToAdd: FilterList, reloadMarkers?: boolean) {\n\n    for (let fa = 0; fa < filtersToAdd.length; fa++) {\n      let filter = filtersToAdd[fa];\n      this.addFilter(filter, false);\n    }\n    this.postFilterChange(reloadMarkers);\n  }\n\n  removeFilter(filter: Filter, reloadMarkers?: boolean) {\n\n    for (let f = 0; f < this.filters.length; f++) {\n      let existingFilter: FilterOrNestedFilter = this.filters[f];\n\n      if (this.filtersAreEqual(filter, existingFilter)) {\n        this.filters.splice(f, 1);\n        break;\n      }\n    }\n    this.postFilterChange(reloadMarkers);\n  }\n\n  removeFilters(filtersToRemove: FilterList, reloadMarkers?: boolean) {\n\n    for (let fr = 0; fr < filtersToRemove.length; fr++) {\n\n      let filter = filtersToRemove[fr];\n\n      this.removeFilter(filter, false);\n    }\n\n    this.postFilterChange(reloadMarkers);\n  }\n\n  resetFilters(reloadMarkers?: boolean) {\n    this.filters = [];\n    this.postFilterChange(reloadMarkers);\n  }\n\n  postFilterChange(reloadMarkers?: boolean) {\n\n    this.latestFilterChangeTimestamp = new Date().getTime();\n\n    if (reloadMarkers != false) {\n      reloadMarkers = true;\n    }\n    if (reloadMarkers == true) {\n      this.removeAllMarkers();\n      this.getClusters(true);\n    }\n  }\n\n\n  /**\n   * method for getting the unaggregated, paginated content of the map\n   */\n  async getMapContents(limit?: number, offset?: number, orderBy?: string) {\n    const geoJSON = this.getClusterGeometry();\n    const zoom = this.getZoom();\n\n    const postData = {\n      \"output_srid\": this.srid,\n      \"geometry_type\": GeometryType.area,\n      \"geojson\": geoJSON,\n      \"clear_cache\": false,\n      \"filters\": this.filters,\n      \"limit\": limit,\n      \"offset\": offset,\n      \"order_by\": orderBy,\n    } as AreaContentRequestData;\n\n    const data = this.anycluster.getAreaContent(zoom, postData);\n\n    return data;\n  }\n\n  /**\n   * methods for getting counts of objects on the current map / geometry\n   */\n\n  async getMapContentCount(modulations?: Modulations) {\n\n    const geoJSON = this.getClusterGeometry()\n\n    const postData = {\n      \"output_srid\": this.srid,\n      \"geometry_type\": this.geometryType,\n      \"geojson\": geoJSON,\n      \"clear_cache\": true,\n      \"filters\": this.filters,\n      \"modulations\": modulations,\n    } as MapContentCountRequestData;\n\n    const zoom = this.getZoom();\n\n    const data = await this.anycluster.getMapContentCount(zoom, postData);\n\n    return data;\n  }\n\n  async getFilteredMapContentCount(filters?: FilterOrNestedFilterList, modulations?: Modulations) {\n    const geoJSON = this.getClusterGeometry()\n\n    const postData = {\n      \"output_srid\": this.srid,\n      \"geometry_type\": this.geometryType,\n      \"geojson\": geoJSON,\n      \"clear_cache\": true,\n      \"filters\": filters,\n      \"modulations\": modulations,\n    } as MapContentCountRequestData;\n\n    const zoom = this.getZoom();\n\n    const data = await this.anycluster.getMapContentCount(zoom, postData);\n\n    return data;\n  }\n\n  async getGroupedMapContents(groupBy: string) {\n    const geoJSON = this.getClusterGeometry()\n\n    const postData = {\n      \"output_srid\": this.srid,\n      \"geometry_type\": this.geometryType,\n      \"geojson\": geoJSON,\n      \"clear_cache\": true,\n      \"filters\": this.filters,\n      \"group_by\": groupBy,\n    } as GroupedMapContentRequestData;\n\n    const zoom = this.getZoom();\n\n    const data = await this.anycluster.getGroupedMapContents(zoom, postData);\n\n    return data;\n\n  }\n\n  async getFilteredGroupedMapContents(filters: FilterOrNestedFilterList, groupBy: string) {\n    const geoJSON = this.getClusterGeometry()\n\n    const postData = {\n      \"output_srid\": this.srid,\n      \"geometry_type\": this.geometryType,\n      \"geojson\": geoJSON,\n      \"clear_cache\": true,\n      \"filters\": filters,\n      \"group_by\": groupBy,\n    } as GroupedMapContentRequestData;\n\n    const zoom = this.getZoom();\n\n    const data = await this.anycluster.getGroupedMapContents(zoom, postData);\n\n    return data;\n  }\n\n  // hooks\n  _onFinalClick(marker: Marker, data: any) {\n    alert(JSON.stringify(data));\n  }\n\n  _onGotClusters() { }\n\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID = \"__googleMapsScriptId\";\n/**\n * The status of the [[Loader]].\n */\nvar LoaderStatus;\n(function (LoaderStatus) {\n    LoaderStatus[LoaderStatus[\"INITIALIZED\"] = 0] = \"INITIALIZED\";\n    LoaderStatus[LoaderStatus[\"LOADING\"] = 1] = \"LOADING\";\n    LoaderStatus[LoaderStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    LoaderStatus[LoaderStatus[\"FAILURE\"] = 3] = \"FAILURE\";\n})(LoaderStatus || (LoaderStatus = {}));\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nclass Loader {\n    /**\n     * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n     * using this library, instead the defaults are set by the Google Maps\n     * JavaScript API server.\n     *\n     * ```\n     * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n     * ```\n     */\n    constructor({ apiKey, authReferrerPolicy, channel, client, id = DEFAULT_ID, language, libraries = [], mapIds, nonce, region, retries = 3, url = \"https://maps.googleapis.com/maps/api/js\", version, }) {\n        this.callbacks = [];\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.apiKey = apiKey;\n        this.authReferrerPolicy = authReferrerPolicy;\n        this.channel = channel;\n        this.client = client;\n        this.id = id || DEFAULT_ID; // Do not allow empty string\n        this.language = language;\n        this.libraries = libraries;\n        this.mapIds = mapIds;\n        this.nonce = nonce;\n        this.region = region;\n        this.retries = retries;\n        this.url = url;\n        this.version = version;\n        if (Loader.instance) {\n            if (!fastDeepEqual(this.options, Loader.instance.options)) {\n                throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(Loader.instance.options)}`);\n            }\n            return Loader.instance;\n        }\n        Loader.instance = this;\n    }\n    get options() {\n        return {\n            version: this.version,\n            apiKey: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            id: this.id,\n            libraries: this.libraries,\n            language: this.language,\n            region: this.region,\n            mapIds: this.mapIds,\n            nonce: this.nonce,\n            url: this.url,\n            authReferrerPolicy: this.authReferrerPolicy,\n        };\n    }\n    get status() {\n        if (this.errors.length) {\n            return LoaderStatus.FAILURE;\n        }\n        if (this.done) {\n            return LoaderStatus.SUCCESS;\n        }\n        if (this.loading) {\n            return LoaderStatus.LOADING;\n        }\n        return LoaderStatus.INITIALIZED;\n    }\n    get failed() {\n        return this.done && !this.loading && this.errors.length >= this.retries + 1;\n    }\n    /**\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n     *\n     * @ignore\n     * @deprecated\n     */\n    createUrl() {\n        let url = this.url;\n        url += `?callback=__googleMapsCallback`;\n        if (this.apiKey) {\n            url += `&key=${this.apiKey}`;\n        }\n        if (this.channel) {\n            url += `&channel=${this.channel}`;\n        }\n        if (this.client) {\n            url += `&client=${this.client}`;\n        }\n        if (this.libraries.length > 0) {\n            url += `&libraries=${this.libraries.join(\",\")}`;\n        }\n        if (this.language) {\n            url += `&language=${this.language}`;\n        }\n        if (this.region) {\n            url += `&region=${this.region}`;\n        }\n        if (this.version) {\n            url += `&v=${this.version}`;\n        }\n        if (this.mapIds) {\n            url += `&map_ids=${this.mapIds.join(\",\")}`;\n        }\n        if (this.authReferrerPolicy) {\n            url += `&auth_referrer_policy=${this.authReferrerPolicy}`;\n        }\n        return url;\n    }\n    deleteScript() {\n        const script = document.getElementById(this.id);\n        if (script) {\n            script.remove();\n        }\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     * @deprecated, use importLibrary() instead.\n     */\n    load() {\n        return this.loadPromise();\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     *\n     * @ignore\n     * @deprecated, use importLibrary() instead.\n     */\n    loadPromise() {\n        return new Promise((resolve, reject) => {\n            this.loadCallback((err) => {\n                if (!err) {\n                    resolve(window.google);\n                }\n                else {\n                    reject(err.error);\n                }\n            });\n        });\n    }\n    importLibrary(name) {\n        this.execute();\n        return google.maps.importLibrary(name);\n    }\n    /**\n     * Load the Google Maps JavaScript API script with a callback.\n     * @deprecated, use importLibrary() instead.\n     */\n    loadCallback(fn) {\n        this.callbacks.push(fn);\n        this.execute();\n    }\n    /**\n     * Set the script on document.\n     */\n    setScript() {\n        var _a, _b;\n        if (document.getElementById(this.id)) {\n            // TODO wrap onerror callback for cases where the script was loaded elsewhere\n            this.callback();\n            return;\n        }\n        const params = {\n            key: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            libraries: this.libraries,\n            v: this.version,\n            mapIds: this.mapIds,\n            language: this.language,\n            region: this.region,\n            authReferrerPolicy: this.authReferrerPolicy,\n        };\n        // keep the URL minimal:\n        Object.keys(params).forEach(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (key) => !params[key] && delete params[key]);\n        if (!((_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.maps) === null || _b === void 0 ? void 0 : _b.importLibrary)) {\n            // tweaked copy of https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n            // which also sets the url, the id, and the nonce\n            /* eslint-disable */\n            ((g) => {\n                // @ts-ignore\n                let h, a, k, p = \"The Google Maps JavaScript API\", c = \"google\", l = \"importLibrary\", q = \"__ib__\", m = document, b = window;\n                // @ts-ignore\n                b = b[c] || (b[c] = {});\n                // @ts-ignore\n                const d = b.maps || (b.maps = {}), r = new Set(), e = new URLSearchParams(), u = () => \n                // @ts-ignore\n                h || (h = new Promise((f, n) => __awaiter(this, void 0, void 0, function* () {\n                    var _a;\n                    yield (a = m.createElement(\"script\"));\n                    a.id = this.id;\n                    e.set(\"libraries\", [...r] + \"\");\n                    // @ts-ignore\n                    for (k in g)\n                        e.set(k.replace(/[A-Z]/g, (t) => \"_\" + t[0].toLowerCase()), g[k]);\n                    e.set(\"callback\", c + \".maps.\" + q);\n                    a.src = this.url + `?` + e;\n                    d[q] = f;\n                    a.onerror = () => (h = n(Error(p + \" could not load.\")));\n                    // @ts-ignore\n                    a.nonce = this.nonce || ((_a = m.querySelector(\"script[nonce]\")) === null || _a === void 0 ? void 0 : _a.nonce) || \"\";\n                    m.head.append(a);\n                })));\n                // @ts-ignore\n                d[l] ? console.warn(p + \" only loads once. Ignoring:\", g) : (d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)));\n            })(params);\n            /* eslint-enable */\n        }\n        this.importLibrary(\"core\").then(() => this.callback(), (error) => {\n            const event = new ErrorEvent(\"error\", { error }); // for backwards compat\n            this.loadErrorCallback(event);\n        });\n    }\n    /**\n     * Reset the loader state.\n     */\n    reset() {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.onerrorEvent = null;\n    }\n    resetIfRetryingFailed() {\n        if (this.failed) {\n            this.reset();\n        }\n    }\n    loadErrorCallback(e) {\n        this.errors.push(e);\n        if (this.errors.length <= this.retries) {\n            const delay = this.errors.length * Math.pow(2, this.errors.length);\n            console.error(`Failed to load Google Maps script, retrying in ${delay} ms.`);\n            setTimeout(() => {\n                this.deleteScript();\n                this.setScript();\n            }, delay);\n        }\n        else {\n            this.onerrorEvent = e;\n            this.callback();\n        }\n    }\n    callback() {\n        this.done = true;\n        this.loading = false;\n        this.callbacks.forEach((cb) => {\n            cb(this.onerrorEvent);\n        });\n        this.callbacks = [];\n    }\n    execute() {\n        this.resetIfRetryingFailed();\n        if (this.done) {\n            this.callback();\n        }\n        else {\n            // short circuit and warn if google.maps is already loaded\n            if (window.google && window.google.maps && window.google.maps.version) {\n                console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n                    \"This may result in undesirable behavior as options and script parameters may not match.\");\n                this.callback();\n                return;\n            }\n            if (this.loading) ;\n            else {\n                this.loading = true;\n                this.setScript();\n            }\n        }\n    }\n}\n\nexport { DEFAULT_ID, Loader, LoaderStatus };\n//# sourceMappingURL=index.esm.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport isEqual from \"fast-deep-equal\";\n\nexport const DEFAULT_ID = \"__googleMapsScriptId\";\n\n// https://developers.google.com/maps/documentation/javascript/libraries#libraries-for-dynamic-library-import\nexport type Library =\n  | \"core\"\n  | \"maps\"\n  | \"places\"\n  | \"geocoding\"\n  | \"routes\"\n  | \"marker\"\n  | \"geometry\"\n  | \"elevation\"\n  | \"streetView\"\n  | \"journeySharing\"\n  | \"drawing\"\n  | \"visualization\";\n\nexport type Libraries = Library[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n/**\n * Loader options\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview.\n   */\n  channel?: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview, use `apiKey` instead.\n   */\n  client?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to Japan:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * @deprecated Passing `mapIds` is no longer required in the script tag.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n  /**\n   * The number of script load retries.\n   */\n  retries?: number;\n  /**\n   * Maps JS customers can configure HTTP Referrer Restrictions in the Cloud\n   * Console to limit which URLs are allowed to use a particular API Key. By\n   * default, these restrictions can be configured to allow only certain paths\n   * to use an API Key. If any URL on the same domain or origin may use the API\n   * Key, you can set `auth_referrer_policy=origin` to limit the amount of data\n   * sent when authorizing requests from the Maps JavaScript API. This is\n   * available starting in version 3.46. When this parameter is specified and\n   * HTTP Referrer Restrictions are enabled on Cloud Console, Maps JavaScript\n   * API will only be able to load if there is an HTTP Referrer Restriction that\n   * matches the current website's domain without a path specified.\n   */\n  authReferrerPolicy?: \"origin\";\n}\n\n/**\n * The status of the [[Loader]].\n */\nexport enum LoaderStatus {\n  INITIALIZED,\n  LOADING,\n  SUCCESS,\n  FAILURE,\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  private static instance: Loader;\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  public readonly version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  public readonly apiKey: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  public readonly channel: string;\n  /**\n   * See [[LoaderOptions.client]]\n   */\n  public readonly client: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  public readonly id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  public readonly libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  public readonly language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  public readonly region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  public readonly mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  public readonly nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.retries]]\n   */\n  public readonly retries: number;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  public readonly url: string;\n  /**\n   * See [[LoaderOptions.authReferrerPolicy]]\n   */\n  public readonly authReferrerPolicy: \"origin\";\n\n  private callbacks: ((e: ErrorEvent) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: ErrorEvent;\n  private errors: ErrorEvent[] = [];\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    authReferrerPolicy,\n    channel,\n    client,\n    id = DEFAULT_ID,\n    language,\n    libraries = [],\n    mapIds,\n    nonce,\n    region,\n    retries = 3,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n    version,\n  }: LoaderOptions) {\n    this.apiKey = apiKey;\n    this.authReferrerPolicy = authReferrerPolicy;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n    this.language = language;\n    this.libraries = libraries;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.region = region;\n    this.retries = retries;\n    this.url = url;\n    this.version = version;\n\n    if (Loader.instance) {\n      if (!isEqual(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        );\n      }\n\n      return Loader.instance;\n    }\n\n    Loader.instance = this;\n  }\n\n  public get options(): LoaderOptions {\n    return {\n      version: this.version,\n      apiKey: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      id: this.id,\n      libraries: this.libraries,\n      language: this.language,\n      region: this.region,\n      mapIds: this.mapIds,\n      nonce: this.nonce,\n      url: this.url,\n      authReferrerPolicy: this.authReferrerPolicy,\n    };\n  }\n\n  public get status(): LoaderStatus {\n    if (this.errors.length) {\n      return LoaderStatus.FAILURE;\n    }\n    if (this.done) {\n      return LoaderStatus.SUCCESS;\n    }\n    if (this.loading) {\n      return LoaderStatus.LOADING;\n    }\n    return LoaderStatus.INITIALIZED;\n  }\n\n  private get failed(): boolean {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1;\n  }\n\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   * @deprecated\n   */\n  public createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=__googleMapsCallback`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.client) {\n      url += `&client=${this.client}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    if (this.authReferrerPolicy) {\n      url += `&auth_referrer_policy=${this.authReferrerPolicy}`;\n    }\n\n    return url;\n  }\n\n  public deleteScript(): void {\n    const script = document.getElementById(this.id);\n    if (script) {\n      script.remove();\n    }\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   * @deprecated, use importLibrary() instead.\n   */\n  public load(): Promise<typeof google> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   * @deprecated, use importLibrary() instead.\n   */\n  public loadPromise(): Promise<typeof google> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: ErrorEvent) => {\n        if (!err) {\n          resolve(window.google);\n        } else {\n          reject(err.error);\n        }\n      });\n    });\n  }\n\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/reference/top-level#google.maps.importLibrary\n   */\n  public importLibrary(name: \"core\"): Promise<google.maps.CoreLibrary>;\n  public importLibrary(name: \"maps\"): Promise<google.maps.MapsLibrary>;\n  public importLibrary(name: \"places\"): Promise<google.maps.PlacesLibrary>;\n  public importLibrary(\n    name: \"geocoding\"\n  ): Promise<google.maps.GeocodingLibrary>;\n  public importLibrary(name: \"routes\"): Promise<google.maps.RoutesLibrary>;\n  public importLibrary(name: \"marker\"): Promise<google.maps.MarkerLibrary>;\n  public importLibrary(name: \"geometry\"): Promise<google.maps.GeometryLibrary>;\n  public importLibrary(\n    name: \"elevation\"\n  ): Promise<google.maps.ElevationLibrary>;\n  public importLibrary(\n    name: \"streetView\"\n  ): Promise<google.maps.StreetViewLibrary>;\n  public importLibrary(\n    name: \"journeySharing\"\n  ): Promise<google.maps.JourneySharingLibrary>;\n  public importLibrary(name: \"drawing\"): Promise<google.maps.DrawingLibrary>;\n  public importLibrary(\n    name: \"visualization\"\n  ): Promise<google.maps.VisualizationLibrary>;\n  public importLibrary(name: Library): Promise<unknown> {\n    this.execute();\n    return google.maps.importLibrary(name);\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   * @deprecated, use importLibrary() instead.\n   */\n  public loadCallback(fn: (e: ErrorEvent) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (document.getElementById(this.id)) {\n      // TODO wrap onerror callback for cases where the script was loaded elsewhere\n      this.callback();\n      return;\n    }\n\n    const params = {\n      key: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      libraries: this.libraries,\n      v: this.version,\n      mapIds: this.mapIds,\n      language: this.language,\n      region: this.region,\n      authReferrerPolicy: this.authReferrerPolicy,\n    };\n    // keep the URL minimal:\n    Object.keys(params).forEach(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (key) => !(params as any)[key] && delete (params as any)[key]\n    );\n\n    if (!window?.google?.maps?.importLibrary) {\n      // tweaked copy of https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n      // which also sets the url, the id, and the nonce\n      /* eslint-disable */\n      ((g) => {\n        // @ts-ignore\n        let h,\n          a,\n          k,\n          p = \"The Google Maps JavaScript API\",\n          c = \"google\",\n          l = \"importLibrary\",\n          q = \"__ib__\",\n          m = document,\n          b = window;\n        // @ts-ignore\n        b = b[c] || (b[c] = {});\n        // @ts-ignore\n        const d = b.maps || (b.maps = {}),\n          r = new Set(),\n          e = new URLSearchParams(),\n          u = () =>\n            // @ts-ignore\n            h || (h = new Promise(async (f, n) => {\n              await (a = m.createElement(\"script\"));\n              a.id = this.id;\n              e.set(\"libraries\", [...r] + \"\");\n              // @ts-ignore\n              for (k in g) e.set(k.replace(/[A-Z]/g, (t) => \"_\" + t[0].toLowerCase()), g[k]);\n              e.set(\"callback\", c + \".maps.\" + q);\n              a.src = this.url + `?` + e;\n              d[q] = f;\n              a.onerror = () => (h = n(Error(p + \" could not load.\")));\n              // @ts-ignore\n              a.nonce = this.nonce || m.querySelector(\"script[nonce]\")?.nonce || \"\";\n              m.head.append(a);\n            }));\n        // @ts-ignore\n        d[l] ? console.warn(p + \" only loads once. Ignoring:\", g) : (d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)));\n      })(params);\n      /* eslint-enable */\n    }\n\n    this.importLibrary(\"core\").then(\n      () => this.callback(),\n      (error) => {\n        const event = new ErrorEvent(\"error\", { error }); // for backwards compat\n        this.loadErrorCallback(event);\n      }\n    );\n  }\n\n  /**\n   * Reset the loader state.\n   */\n  private reset(): void {\n    this.deleteScript();\n    this.done = false;\n    this.loading = false;\n    this.errors = [];\n    this.onerrorEvent = null;\n  }\n\n  private resetIfRetryingFailed(): void {\n    if (this.failed) {\n      this.reset();\n    }\n  }\n\n  private loadErrorCallback(e: ErrorEvent): void {\n    this.errors.push(e);\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length;\n\n      console.error(\n        `Failed to load Google Maps script, retrying in ${delay} ms.`\n      );\n\n      setTimeout(() => {\n        this.deleteScript();\n        this.setScript();\n      }, delay);\n    } else {\n      this.onerrorEvent = e;\n      this.callback();\n    }\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    this.resetIfRetryingFailed();\n\n    if (this.done) {\n      this.callback();\n    } else {\n      // short circuit and warn if google.maps is already loaded\n      if (window.google && window.google.maps && window.google.maps.version) {\n        console.warn(\n          \"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n            \"This may result in undesirable behavior as options and script parameters may not match.\"\n        );\n        this.callback();\n        return;\n      }\n\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n\n        this.setScript();\n      }\n    }\n  }\n}\n"],"names":["isEqual"],"version":3,"file":"anycluster-google.js.map"}