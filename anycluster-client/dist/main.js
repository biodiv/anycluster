var e,t,r,i,s,o,a;function n(e,t,r,i){Object.defineProperty(e,t,{get:r,set:i,enumerable:!0,configurable:!0})}n(module.exports,"ClusterMethod",()=>t),n(module.exports,"GeometryType",()=>r),n(module.exports,"IconType",()=>i),n(module.exports,"SRIDS",()=>e),n(module.exports,"Operators",()=>o),n(module.exports,"LogicalOperators",()=>a),n(module.exports,"Anycluster",()=>g),n(module.exports,"AnyclusterClient",()=>c),function(e){e.EPSG4326="EPSG:4326",e.EPSG3857="EPSG:3857"}(e||(e={})),function(e){e.kmeans="kmeans",e.grid="grid"}(t||(t={})),function(e){e.viewport="viewport",e.area="area"}(r||(r={})),function(e){e.exact="exact",e.rounded="rounded"}(i||(i={})),function(e){e[e.grid=64]="grid",e[e.kmeans=150]="kmeans"}(s||(s={}));const l={1:[24,39],5:[30,30],10:[30,30],50:[40,40],100:[40,40],1e3:[50,50],1e4:[60,60]};!function(e){e.in="in",e.notIn="not in",e.equals="=",e.unEquals="!=",e.largerThan=">=",e.smallerThan="<=",e.startswith="startswith",e.contains="contains"}(o||(o={})),function(e){e.AND="AND",e.OR="OR"}(a||(a={}));const h=Object.freeze({minX:-179,maxX:179,minY:-89,maxY:89}),d=Object.freeze({minX:-20037500,maxX:20037500,minY:-20048960,maxY:20048960});class g{constructor(t,r,i){if(this.apiUrl=t,this.gridSize=r,this.srid=i,this.srid==e.EPSG4326)this.maxBounds=h;else if(this.srid==e.EPSG3857)this.maxBounds=d;else throw Error(`invalid srid given: ${this.srid} `)}async getGridCluster(e,t){let r=`${this.apiUrl}grid/${e}/${this.gridSize}/`,i=await this.post(r,t);return i}async getKmeansCluster(e,t){let r=`${this.apiUrl}kmeans/${e}/${this.gridSize}/`,i=await this.post(r,t);return i}async getKmeansClusterContent(e,t){let r=`${this.apiUrl}get-kmeans-cluster-content/${e}/${this.gridSize}/`,i=await this.post(r,t);return i}async getDatasetContent(e,t){let r=`${this.apiUrl}get-dataset-content/${e}/${this.gridSize}/${t}/`,i=await this.get(r);return i}async getMapContentCount(e,t){let r=`${this.apiUrl}get-map-content-count/${e}/${this.gridSize}/`,i=await this.post(r,t);return i}async getGroupedMapContents(e,t){let r=`${this.apiUrl}get-grouped-map-contents/${e}/${this.gridSize}/`,i=await this.post(r,t);return i}async getAreaContent(e,t){let r=`${this.apiUrl}get-area-content/${e}/${this.gridSize}/`,i=await this.post(r,t);return i}viewportToGeoJSON(e){let t=Math.max(e.left,this.maxBounds.minX),r=Math.min(e.right,this.maxBounds.maxX),i=Math.min(e.top,this.maxBounds.maxY),s=Math.max(e.bottom,this.maxBounds.minY),o={type:"Feature",geometry:{type:"Polygon",coordinates:[[[t,i],[r,i],[r,s],[t,s],[t,i]]],crs:{type:"name",properties:{name:this.srid}}}};return o}async post(e,t){let r=encodeURI(e),i={method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"},mode:"cors",credentials:"include"},s=await fetch(r,i),o=await s.json();if(s.ok)return o;throw Error(JSON.stringify(o))}async get(e){let t=encodeURI(e),r=await fetch(t,{method:"GET",headers:{"Content-Type":"application/json"},mode:"cors",credentials:"include"}),i=await r.json();if(r.ok)return i;throw Error(JSON.stringify(i))}}const u={5:"rgba(255, 192, 203, .5)",10:"rgba(240, 128, 128, .5)",50:"rgba(255, 127, 80, .5)",100:"rgba(255, 165, 0, .5)",1e3:"rgba(255, 69, 0, .5)",1e4:"rgba(255, 0 , 0, .5)"},m={5:"pink",10:"lightcoral",50:"coral",100:"orange",1e3:"orangered",1e4:"red"};class c{constructor(o,a,n,h){this.map=o,this.apiUrl=a,this.markerFolderPath=n,this.filters=[],this.map=o,this.apiUrl=a,this.markerFolderPath=n,h=h||{},this.srid=h.srid?h.srid:e.EPSG4326,this.kmeansGridSize=h.gridGridSize?h.gridGridSize:s.kmeans,this.gridGridSize=h.gridGridSize?h.gridGridSize:s.grid,this.clusterMethod=h.clusterMethod?h.clusterMethod:t.kmeans,this.geometryType=h.geometryType?h.geometryType:r.viewport,this.area=h.area?h.area:null,this.iconType=h.iconType?h.iconType:i.rounded,this.singlePinImages=h.singlePinImages?h.singlePinImages:{},this.markerImageSizes=h.markerImageSizes?h.markerImageSizes:l,this.gridFillColors=h.gridFillColors?h.gridFillColors:u,this.gridStrokeColors=h.gridStrokeColors?h.gridStrokeColors:m,this.onGotClusters=h.onGotClusters?h.onGotClusters:this._onGotClusters,this.onFinalClick=h.onFinalClick?h.onFinalClick:this._onFinalClick,this.area&&this.setArea(this.area);let d=this.getGridSize();this.anycluster=new g(this.apiUrl,d,this.srid),this.createClusterLayers(),this.markerList=[],this.startClustering()}createClusterLayers(){throw Error("NotImplementedError: createClusterLayers")}addArea(e){throw Error("NotImplementedError: addArea")}removeArea(){throw Error("NotImplementedError: removeArea")}removeAllMarkers(){throw Error("NotImplementedError: removeAllMarkers")}getZoom(){throw Error("NotImplementedError: getZoom")}setMap(e,t,r){throw Error("NotImplementedError: setMap")}getViewport(){throw Error("NotImplementedError: setMap")}addMapEventListeners(){throw Error("NotImplementedError: addMapEventListeners")}drawMarker(e){throw Error("NotImplementedError: drawMarker")}drawCell(e){throw Error("NotImplementedError: drawCell")}getGridSize(){return this.clusterMethod==t.grid?this.gridGridSize:this.kmeansGridSize}setClusterMethod(e){e==t.grid&&(this.area=null,this.geometryType=r.viewport,this.removeArea()),this.removeAllMarkers(),this.clusterMethod=e;let i=this.getGridSize();this.anycluster=new g(this.apiUrl,i,this.srid),this.markerList=[],this.getClusters(!0)}setArea(e){this.area=e,this.removeArea(),null==e?(this.geometryType=r.viewport,this.setClusterMethod(t.kmeans)):(this.addArea(e),this.geometryType=r.area,this.setClusterMethod(t.kmeans))}getSinglePinImageURL(e){let t=e.pinimg,r=`${this.markerFolderPath}pin_unknown.png`;return this.singlePinImages&&t&&t in this.singlePinImages&&(r=this.singlePinImages[t]),r}selectPinIcon(e){let t=e.count,r=this.getSinglePinImageURL(e),s="1";t>1e4?s="10000":t>1e3?s="1000":t>100?s="100":t>50?s="50":t>10?s="10":t>1&&(s="5"),t>1&&(r=this.iconType==i.exact?`${this.markerFolderPath}${s}_empty.png`:`${this.markerFolderPath}${s}.png`);let o=this.markerImageSizes[s],a=[Math.round(o[0]/2),o[1]-1],n=[.5,1];t>1&&(a=[Math.round(o[0]/2),Math.round(o[1]/2)],n=[.5,.5]);let l={url:r,size:o,anchor:a,relativeAnchor:n,popupAnchor:[0,-Math.round(o[1])+8]};return l}setMarkerProps(e,t){return e.x=t.center.x,e.y=t.center.y,e.count=t.count,t.hasOwnProperty("ids")&&(e.ids=t.ids),t.hasOwnProperty("id")&&(e.id=t.id),t.hasOwnProperty("geojson")&&(e.geojson=t.geojson),e}markerClickFunction(e,t){this.removeAllMarkers();let r=this.getZoom();r+=3,this.setMap(e,t,r)}async onMarkerFinalClick(e){let r=this.getZoom(),i=e.x,s=e.y,o=e.ids;if(this.clusterMethod==t.kmeans){let t={geometry_type:this.geometryType,input_srid:this.srid,x:i,y:s,ids:o,filters:this.filters},a=await this.anycluster.getKmeansClusterContent(r,t);this.onFinalClick(e,a)}else if(this.clusterMethod=t.grid){if(1==e.count){let t=await this.anycluster.getDatasetContent(r,e.id);this.onFinalClick(e,t)}else{let t=e.geojson,r=this.getZoom(),i=await this.anycluster.getAreaContent(r,t);this.onFinalClick(e,i)}}}roundMarkerCount(e){return e=1==e?1:e<=5?5:e<=10?10:e<=50?50:e<=100?100:e<=1e3?1e3:1e4}getClusterGeometry(){let e;if(this.geometryType==r.viewport){let t=this.getViewport();e=this.anycluster.viewportToGeoJSON(t)}else if(this.geometryType==r.area&&this.area)e=this.area;else throw Error("No cluster geometry found");return e}async getClusters(e=!1){let r=this.getClusterGeometry(),i={output_srid:this.srid,geometry_type:this.geometryType,geojson:r,clear_cache:e,filters:this.filters},s=this.getZoom();if(this.clusterMethod==t.kmeans){let e=await this.anycluster.getKmeansCluster(s,i);e.length>0&&e.forEach(e=>{this.drawMarker(e)})}else if(this.clusterMethod==t.grid){let e=await this.anycluster.getGridCluster(s,i);e.length>0&&e.forEach(e=>{this.drawCell(e)})}else throw Error(`Invalid clusterMethod: ${this.clusterMethod}`);this.onGotClusters()}startClustering(){this.getClusters(!0),this.addMapEventListeners()}filtersAreEqual(e,t){if("column"in e&&"column"in t){if(e.column==t.column&&e.value==t.value&&e.operator==t.operator)return!0}else if(JSON.stringify(e)===JSON.stringify(t))return!0;return!1}filter(e,t){Array.isArray(e)?this.filters=e:this.filters=[e],this.postFilterChange(t)}addFilter(e,t){let r=!1;for(let t=0;t<this.filters.length;t++){let i=this.filters[t];if(this.filtersAreEqual(e,i)){r=!0;break}}r||this.filters.push(e),this.postFilterChange(t)}addFilters(e,t){for(let t=0;t<e.length;t++){let r=e[t];this.addFilter(r,!1)}this.postFilterChange(t)}removeFilter(e,t){for(let t=0;t<this.filters.length;t++){let r=this.filters[t];if(this.filtersAreEqual(e,r)){this.filters.splice(t,1);break}}this.postFilterChange(t)}removeFilters(e,t){for(let t=0;t<e.length;t++){let r=e[t];this.removeFilter(r,!1)}this.postFilterChange(t)}resetFilters(e){this.filters=[],this.postFilterChange(e)}postFilterChange(e){!1!=e&&(e=!0),!0==e&&(this.removeAllMarkers(),this.getClusters(!0))}async getMapContents(e,t){let i=this.getClusterGeometry(),s=this.getZoom(),o={output_srid:this.srid,geometry_type:r.area,geojson:i,clear_cache:!1,filters:this.filters,limit:e,offset:t},a=this.anycluster.getAreaContent(s,o);return a}async getMapContentCount(e){let t=this.getClusterGeometry(),r={output_srid:this.srid,geometry_type:this.geometryType,geojson:t,clear_cache:!0,filters:this.filters,modulations:e},i=this.getZoom(),s=await this.anycluster.getMapContentCount(i,r);return s}async getGroupedMapContents(e){let t=this.getClusterGeometry(),r={output_srid:this.srid,geometry_type:this.geometryType,geojson:t,clear_cache:!0,filters:this.filters,group_by:e},i=this.getZoom(),s=await this.anycluster.getGroupedMapContents(i,r);return s}_onFinalClick(e,t){alert(JSON.stringify(t))}_onGotClusters(){}}
//# sourceMappingURL=main.js.map
