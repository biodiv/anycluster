var t,e,r,i,s,o,a;function n(t,e,r,i){Object.defineProperty(t,e,{get:r,set:i,enumerable:!0,configurable:!0})}n(module.exports,"ClusterMethod",()=>e),n(module.exports,"GeometryType",()=>r),n(module.exports,"IconType",()=>i),n(module.exports,"SRIDS",()=>t),n(module.exports,"Operators",()=>o),n(module.exports,"LogicalOperators",()=>a),n(module.exports,"Anycluster",()=>m),n(module.exports,"Bounds3857",()=>g),n(module.exports,"Bounds4326",()=>h),n(module.exports,"AnyclusterClient",()=>p),function(t){t.EPSG4326="EPSG:4326",t.EPSG3857="EPSG:3857"}(t||(t={})),function(t){t.kmeans="kmeans",t.grid="grid"}(e||(e={})),function(t){t.viewport="viewport",t.area="area"}(r||(r={})),function(t){t.exact="exact",t.rounded="rounded"}(i||(i={})),function(t){t[t.grid=64]="grid",t[t.kmeans=150]="kmeans"}(s||(s={}));const l={1:[24,39],5:[30,30],10:[30,30],50:[40,40],100:[40,40],1e3:[50,50],1e4:[60,60]};!function(t){t.in="in",t.notIn="not in",t.equals="=",t.unEquals="!=",t.largerThan=">=",t.smallerThan="<=",t.startswith="startswith",t.contains="contains"}(o||(o={})),function(t){t.AND="AND",t.OR="OR"}(a||(a={}));const h=Object.freeze({minX:-179,maxX:179,minY:-89,maxY:89}),g=Object.freeze({minX:-20037500,maxX:20037500,minY:-20048960,maxY:20048960});class m{constructor(e,r,i){if(this.apiUrl=e,this.gridSize=r,this.srid=i,this.srid==t.EPSG4326)this.maxBounds=h;else if(this.srid==t.EPSG3857)this.maxBounds=g;else throw Error(`invalid srid given: ${this.srid} `)}validateZoom(t){if(!Number.isInteger(t))throw Error(`[anycluster] non-integer zoom: ${t}`)}async getGridCluster(t,e){this.validateZoom(t);let r=`${this.apiUrl}grid/${t}/${this.gridSize}/`,i=await this.post(r,e);return i}async getKmeansCluster(t,e){this.validateZoom(t);let r=`${this.apiUrl}kmeans/${t}/${this.gridSize}/`,i=await this.post(r,e);return i}async getKmeansClusterContent(t,e){this.validateZoom(t);let r=`${this.apiUrl}get-kmeans-cluster-content/${t}/${this.gridSize}/`,i=await this.post(r,e);return i}async getDatasetContent(t,e){this.validateZoom(t);let r=`${this.apiUrl}get-dataset-content/${t}/${this.gridSize}/${e}/`,i=await this.get(r);return i}async getMapContentCount(t,e){this.validateZoom(t);let r=`${this.apiUrl}get-map-content-count/${t}/${this.gridSize}/`,i=await this.post(r,e);return i}async getGroupedMapContents(t,e){this.validateZoom(t);let r=`${this.apiUrl}get-grouped-map-contents/${t}/${this.gridSize}/`,i=await this.post(r,e);return i}async getAreaContent(t,e){this.validateZoom(t);let r=`${this.apiUrl}get-area-content/${t}/${this.gridSize}/`,i=await this.post(r,e);return i}viewportToGeoJSON(t){let e=Math.max(t.left,this.maxBounds.minX),r=Math.min(t.right,this.maxBounds.maxX),i=Math.min(t.top,this.maxBounds.maxY),s=Math.max(t.bottom,this.maxBounds.minY),o={type:"Feature",geometry:{type:"Polygon",coordinates:[[[e,i],[r,i],[r,s],[e,s],[e,i]]],crs:{type:"name",properties:{name:this.srid}}}};return o}async post(t,e){let r=encodeURI(t),i={method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"},mode:"cors",credentials:"include"},s=await fetch(r,i),o=await s.json();if(s.ok)return o;throw Error(JSON.stringify(o))}async get(t){let e=encodeURI(t),r=await fetch(e,{method:"GET",headers:{"Content-Type":"application/json"},mode:"cors",credentials:"include"}),i=await r.json();if(r.ok)return i;throw Error(JSON.stringify(i))}}const d={5:"rgba(255, 192, 203, .5)",10:"rgba(240, 128, 128, .5)",50:"rgba(255, 127, 80, .5)",100:"rgba(255, 165, 0, .5)",1e3:"rgba(255, 69, 0, .5)",1e4:"rgba(255, 0 , 0, .5)"},u={5:"pink",10:"lightcoral",50:"coral",100:"orange",1e3:"orangered",1e4:"red"};class p{constructor(o,a,n,h){this.map=o,this.apiUrl=a,this.markerFolderPath=n,this.filters=[],this.isStartup=!1,this.latestFilterChangeTimestamp=null,this.map=o,this.apiUrl=a,this.markerFolderPath=n,h=h||{},this.srid=h.srid?h.srid:t.EPSG4326,this.kmeansGridSize=h.gridGridSize?h.gridGridSize:s.kmeans,this.gridGridSize=h.gridGridSize?h.gridGridSize:s.grid,this.clusterMethod=h.clusterMethod?h.clusterMethod:e.kmeans,this.geometryType=h.geometryType?h.geometryType:r.viewport,this.area=h.area?h.area:null,this.iconType=h.iconType?h.iconType:i.rounded,this.singlePinImages=h.singlePinImages?h.singlePinImages:{},this.getSinglePinImageURL=h.getSinglePinImageURL?h.getSinglePinImageURL:this._getSinglePinImageURL,this.markerImageSizes=h.markerImageSizes?h.markerImageSizes:l,this.gridFillColors=h.gridFillColors?h.gridFillColors:d,this.gridStrokeColors=h.gridStrokeColors?h.gridStrokeColors:u,this.maxZoom=h.maxZoom?h.maxZoom:13,this.onGotClusters=h.onGotClusters?h.onGotClusters:this._onGotClusters,this.onFinalClick=h.onFinalClick?h.onFinalClick:this._onFinalClick,this.area&&this.setArea(this.area);let g=this.getGridSize();this.anycluster=new m(this.apiUrl,g,this.srid),this.createClusterLayers(),this.markerList=[];let p=!1!==h.startClustering||h.startClustering;!0===p&&this.startClustering()}createClusterLayers(){throw Error("NotImplementedError: createClusterLayers")}addArea(t){throw Error("NotImplementedError: addArea")}removeArea(){throw Error("NotImplementedError: removeArea")}removeAllMarkers(){throw Error("NotImplementedError: removeAllMarkers")}getZoom(){throw Error("NotImplementedError: getZoom")}setMap(t,e,r){throw Error("NotImplementedError: setMap")}getViewport(){throw Error("NotImplementedError: setMap")}addMapEventListeners(){throw Error("NotImplementedError: addMapEventListeners")}drawKmeansMarker(t){throw Error("NotImplementedError: drawKmeansMarker")}drawCell(t){throw Error("NotImplementedError: drawCell")}drawGridMarker(t){throw Error("NotImplementedError: drawGridMarker")}getGridSize(){return this.clusterMethod==e.grid?this.gridGridSize:this.kmeansGridSize}setClusterMethod(t){t==e.grid&&(this.area=null,this.geometryType=r.viewport,this.removeArea()),this.removeAllMarkers(),this.clusterMethod=t;let i=this.getGridSize();this.anycluster=new m(this.apiUrl,i,this.srid),this.markerList=[],this.getClusters(!0)}setArea(t){this.area=t,this.removeArea(),null==t?(this.geometryType=r.viewport,this.setClusterMethod(e.kmeans)):(this.addArea(t),this.geometryType=r.area,this.setClusterMethod(e.kmeans))}_getSinglePinImageURL(t){let e=t.pinimg,r=`${this.markerFolderPath}pin_unknown.png`;return this.singlePinImages&&e&&e in this.singlePinImages&&(r=this.singlePinImages[e]),r}selectPinIcon(t){let e=t.count,r=this.getSinglePinImageURL(t),s="1";e>1e4?s="10000":e>1e3?s="1000":e>100?s="100":e>50?s="50":e>10?s="10":e>1&&(s="5"),e>1&&(r=this.iconType==i.exact?`${this.markerFolderPath}${s}_empty.png`:`${this.markerFolderPath}${s}.png`);let o=this.markerImageSizes[s],a=[Math.round(o[0]/2),o[1]-1],n=[.5,1];e>1&&(a=[Math.round(o[0]/2),Math.round(o[1]/2)],n=[.5,.5]);let l={url:r,size:o,anchor:a,relativeAnchor:n,popupAnchor:[0,-Math.round(o[1])+8]};return l}setMarkerProps(t,e){return t.x=e.center.x,t.y=e.center.y,t.count=e.count,t.ids=e.ids,t}setCellProps(t,e){return t.x=e.center.x,t.y=e.center.y,t.count=e.count,t.id=e.id,t.geojson=e.geojson,t}markerClickFunction(t,e){this.removeAllMarkers();let r=this.getZoom();r+=3,this.setMap(t,e,r)}async onMarkerFinalClick(t){let r=this.getZoom(),i=t.x,s=t.y;if(this.clusterMethod==e.kmeans){let e=t.ids,o={geometry_type:this.geometryType,input_srid:this.srid,x:i,y:s,ids:e,filters:this.filters},a=await this.anycluster.getKmeansClusterContent(r,o);this.onFinalClick(t,a)}else if(this.clusterMethod=e.grid){if(1==t.count){let e=await this.anycluster.getDatasetContent(r,t.id);this.onFinalClick(t,e)}else{let e=t.geojson,r=this.getZoom(),i=await this.anycluster.getAreaContent(r,e);this.onFinalClick(t,i)}}}roundMarkerCount(t){return t=1==t?1:t<=5?5:t<=10?10:t<=50?50:t<=100?100:t<=1e3?1e3:1e4}getClusterGeometry(){let t;if(this.geometryType==r.viewport){let e=this.getViewport();t=this.anycluster.viewportToGeoJSON(e)}else if(this.geometryType==r.area&&this.area)t=this.area;else throw Error("No cluster geometry found");return t}async getClusters(t=!1){let r=this.getClusterGeometry(),i={output_srid:this.srid,geometry_type:this.geometryType,geojson:r,clear_cache:t,filters:this.filters},s=this.getZoom(),o=this.latestFilterChangeTimestamp;if(this.clusterMethod==e.kmeans){let t=await this.anycluster.getKmeansCluster(s,i),e=this.getZoom();t.length>0&&o===this.latestFilterChangeTimestamp&&s===e?(t.forEach(t=>{this.drawKmeansMarker(t)}),this.onGotClusters()):console.log("[anycluster]: not drawing markers because of outdated response")}else if(this.clusterMethod==e.grid){let t=await this.anycluster.getGridCluster(s,i),e=this.getZoom();t.length>0&&o===this.latestFilterChangeTimestamp&&s===e?(t.forEach(t=>{this.drawCell(t)}),this.onGotClusters()):console.log("[anycluster]: not drawing markers because of outdated response")}else throw Error(`Invalid clusterMethod: ${this.clusterMethod}`)}async startClustering(){this.isStartup=!0,await this.getClusters(!0),this.addMapEventListeners(),this.isStartup=!1}filtersAreEqual(t,e){if("column"in t&&"column"in e){if(t.column==e.column&&t.value==e.value&&t.operator==e.operator)return!0}else if(JSON.stringify(t)===JSON.stringify(e))return!0;return!1}filter(t,e){Array.isArray(t)?this.filters=t:this.filters=[t],this.postFilterChange(e)}addFilter(t,e){let r=!1;for(let e=0;e<this.filters.length;e++){let i=this.filters[e];if(this.filtersAreEqual(t,i)){r=!0;break}}r||this.filters.push(t),this.postFilterChange(e)}addFilters(t,e){for(let e=0;e<t.length;e++){let r=t[e];this.addFilter(r,!1)}this.postFilterChange(e)}removeFilter(t,e){for(let e=0;e<this.filters.length;e++){let r=this.filters[e];if(this.filtersAreEqual(t,r)){this.filters.splice(e,1);break}}this.postFilterChange(e)}removeFilters(t,e){for(let e=0;e<t.length;e++){let r=t[e];this.removeFilter(r,!1)}this.postFilterChange(e)}resetFilters(t){this.filters=[],this.postFilterChange(t)}postFilterChange(t){this.latestFilterChangeTimestamp=new Date().getTime(),!1!=t&&(t=!0),!0==t&&(this.removeAllMarkers(),this.getClusters(!0))}async getMapContents(t,e,i){let s=this.getClusterGeometry(),o=this.getZoom(),a={output_srid:this.srid,geometry_type:r.area,geojson:s,clear_cache:!1,filters:this.filters,limit:t,offset:e,order_by:i},n=this.anycluster.getAreaContent(o,a);return n}async getMapContentCount(t){let e=this.getClusterGeometry(),r={output_srid:this.srid,geometry_type:this.geometryType,geojson:e,clear_cache:!0,filters:this.filters,modulations:t},i=this.getZoom(),s=await this.anycluster.getMapContentCount(i,r);return s}async getFilteredMapContentCount(t,e){let r=this.getClusterGeometry(),i={output_srid:this.srid,geometry_type:this.geometryType,geojson:r,clear_cache:!0,filters:t,modulations:e},s=this.getZoom(),o=await this.anycluster.getMapContentCount(s,i);return o}async getGroupedMapContents(t){let e=this.getClusterGeometry(),r={output_srid:this.srid,geometry_type:this.geometryType,geojson:e,clear_cache:!0,filters:this.filters,group_by:t},i=this.getZoom(),s=await this.anycluster.getGroupedMapContents(i,r);return s}async getFilteredGroupedMapContents(t,e){let r=this.getClusterGeometry(),i={output_srid:this.srid,geometry_type:this.geometryType,geojson:r,clear_cache:!0,filters:t,group_by:e},s=this.getZoom(),o=await this.anycluster.getGroupedMapContents(s,i);return o}_onFinalClick(t,e){alert(JSON.stringify(e))}_onGotClusters(){}}
//# sourceMappingURL=main.js.map
