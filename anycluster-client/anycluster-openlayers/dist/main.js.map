{"mappings":"qdAqBA,MAAMA,EAAwB,CAC1B,EAAG,wBACH,GAAI,uBACJ,GAAI,wBACJ,IAAK,uBACL,IAAM,uBACN,IAAO,wBAGLC,EAA0B,CAC5B,EAAG,OACH,GAAI,aACJ,GAAI,QACJ,IAAK,SACL,IAAM,YACN,IAAO,OAUJ,MAAMC,UAA6BC,EAAAC,iBAMtCC,YAAYC,EAAUC,EAAgBC,EAA0BC,GAC5DC,MAAMJ,EAAKC,EAAQC,EAAkBC,GAErCE,KAAKC,YAAcD,KAAKE,UAExBF,KAAKG,eAAiBL,EAASK,eAAiBL,EAASK,eAAiBd,EAC1EW,KAAKI,iBAAmBN,EAASM,iBAAmBN,EAASM,iBAAmBd,CAEpF,CAGAe,aACQL,KAAKL,IAAIW,eAAe,cACxBN,KAAKL,IAAIY,UAAUC,YAAYC,OAEvC,CAEAC,aAAaC,EAAkBC,GAY3B,OAVc,IAAI,EAAAC,EAAAC,OAAM,CACpBC,OAAQ,IAAI,EAAAF,EAAAG,QAAO,CACfC,MAAO,qBACPC,MAAO,IAEXC,KAAM,IAAI,EAAAN,EAAAO,MAAK,CACXH,MAAO,yBAKnB,CAEAI,QAAQC,GACCtB,KAAKL,IAAIW,eAAe,cACzBN,KAAKuB,kBAGT,MAAMC,EAAW,IAAIC,EAAAC,GAAJ,CAAY,CACzBC,kBAAmB,cACpBC,aAAaN,GAGhBtB,KAAKL,IAAIY,UAAUC,YAAYqB,YAAYL,EAE/C,CAEAM,sBAEI,MAAMC,EAAmB,IAAIN,EAAAO,GAAJ,CAAgB,CACrCC,OAAQ,IAAIR,EAAAS,IACZC,MAAOnC,KAAKoC,aAAaC,KAAKrC,QAGlCA,KAAKL,IAAI2C,SAASP,GAClB/B,KAAKL,IAAIoC,iBAAmBA,EAE5B,MAAMQ,EAAc,IAAId,EAAAO,GAAJ,CAAgB,CAChCC,OAAQ,IAAIR,EAAAS,MAGhBlC,KAAKL,IAAI2C,SAASC,GAClBvC,KAAKL,IAAI4C,YAAcA,EAEvBvC,KAAKL,IAAI6C,GAAG,SAAUC,IAElB,IAAIC,GAAM,EAEV1C,KAAKL,IAAIgD,sBAAsBF,EAAMG,OAAQjC,IAEzC,GAAW,GAAP+B,IAEAG,QAAQC,IAAInC,GAEe,QAAvBA,EAAQoC,aAAgD,UAAvBpC,EAAQoC,aAAwB,CACjEL,GAAM,EACK1C,KAAKE,WAEJ,IAAuB,GAAjBS,EAAQqC,MACtBhD,KAAKiD,mBAAmBtC,GAIxBX,KAAKkD,oBAAoBvC,EAAQwC,EAAGxC,EAAQyC,EAEpD,CACJ,GACJ,IAGJpD,KAAKL,IAAI6C,GAAG,eAAgBC,IACxB,IAAIG,EAAQ5C,KAAKL,IAAI0D,cAAcZ,EAAMa,eACrCZ,EAAM1C,KAAKL,IAAI4D,kBAAkBX,GACrC5C,KAAKL,IAAI6D,cAAcrB,MAAMsB,OAASf,EAAM,UAAY,EAAE,GAElE,CAEAnB,kBAEI,MAAMhB,EAAY,IAAIkB,EAAAO,GAAJ,CAAgB,CAC9BC,OAAQ,IAAIR,EAAAS,IACZC,MAAOnC,KAAKU,aAAa2B,KAAKrC,QAGnBA,KAAKL,IAAI+D,YACjBC,SAAS,EAAGpD,GAEnBP,KAAKL,IAAIY,UAAYA,CACzB,CAEAqD,cAAcC,GAEV,MAAMC,EAAa9D,KAAK+D,cAAcF,GAEhCG,EAAO,IAAI,EAAAnD,EAAAoD,MAAK,CAClBC,OAAQJ,EAAWK,eACnBC,YAAa,YACbC,IAAKP,EAAWQ,IAChBC,QAAST,EAAWU,KACpBA,KAAMV,EAAWU,OAOrB,OAJc,IAAI,EAAA3D,EAAAC,OAAM,CACpB2D,MAAOT,GAKf,CAEAU,WAAWb,GAEP,MAAM1B,EAAQnC,KAAK4D,cAAcC,GAC3Bc,EAAQ,IAAIlD,EAAAmD,GAAJ,CAAU,CAACf,EAAQgB,OAAO1B,EAAGU,EAAQgB,OAAOzB,IAE1D,IAAI0B,EAAS,IAAIrD,EAAAsD,GAAJ,CAAYJ,GAEzBG,EAAOE,SAAS7C,GAEhB,IAAI8C,EAAkCjF,KAAKkF,eAAeJ,EAAQjB,GAClEoB,EAAelC,YAAc,SAE7B/C,KAAKL,IAAI4C,YAAY/B,YAAY2E,WAAWF,GAE5CjF,KAAKoF,WAAWC,KAAKJ,EACzB,CAEA7C,aAAazB,EAAkBC,GAE3B,MAAM0E,EAAetF,KAAKuF,iBAAiB5E,EAAQ6E,IAAI,UACjDC,EAAYzF,KAAKG,eAAemF,GAChCI,EAAc1F,KAAKI,iBAAiBkF,GAa1C,OAVc,IAAI,EAAAzE,EAAAC,OAAM,CACpBC,OAAQ,IAAI,EAAAF,EAAAG,QAAO,CACfC,MAAOyE,EACPxE,MALa,IAOjBC,KAAM,IAAI,EAAAN,EAAAO,MAAK,CACXH,MAAOwE,KAKnB,CAEAE,SAAS9B,GAIL,GAAa,GAFCA,EAAQb,MAGlBhD,KAAK0E,WAAWb,OAEf,CAED,MAAMvC,EAAU,CACZsE,KAAQ,UACRC,SAAYhC,EAAQvC,SAGxB,IAAIX,GAAU,IAAIc,EAAAC,KAAUoE,YAAYxE,GAEpCyE,EAAmC/F,KAAKkF,eAAevE,EAASkD,GACpEkC,EAAgBhD,YAAc,OAE9B/C,KAAKL,IAAIoC,iBAAiBvB,YAAY2E,WAAWY,EAErD,CAEJ,CAEAC,mBAGIhG,KAAKL,IAAI4C,YAAY/B,YAAYC,QAE7BT,KAAKL,IAAIW,eAAe,qBACxBN,KAAKL,IAAIoC,iBAAiBvB,YAAYC,QAG1CT,KAAKoF,WAAWa,OAAS,CAE7B,CAEAC,uBAEIlG,KAAKL,IAAIwG,iBAAiB,WAAY1D,IAElC,IAAI2D,EAAUpG,KAAKE,UACfkG,GAAWpG,KAAKC,cAChBD,KAAKgG,mBACLhG,KAAKC,YAAcmG,GAEvBpG,KAAKqG,aAAW,GAExB,CAGA7C,cAEI,MAEM8C,EAFOtG,KAAKL,IAAI4G,UAEFC,gBAAgBxG,KAAKL,IAAI8G,WAEvCC,EAAOJ,EAAO,GACdK,EAASL,EAAO,GAChBM,EAAQN,EAAO,GAUrB,MAPqB,CACjBI,KAAQA,EACRG,IAJQP,EAAO,GAKfM,MAASA,EACTD,OAAUA,EAKlB,CAEAzG,UAEI,OADaF,KAAKL,IAAI4G,UACVrG,SAChB,CAEA4G,QAAQC,GACJ/G,KAAKL,IAAImH,QAAQC,EACrB,CAGAC,OAAO7D,EAAWC,EAAW2D,GACZ/G,KAAKL,IAAI4G,UACjBU,QAAQ,CACTF,KAAMA,EACNlC,OAAQ,CAAC1B,EAAGC,GACZ8D,SAAU,KAElB","sources":["src/anycluster-openlayers.ts"],"sourcesContent":["import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    Cluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n} from 'anycluster-client';\n\nexport {\n    ClusterMethod\n};\n\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport { Icon, Stroke, Style, Fill } from 'ol/style';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\n\n\nconst defaultGridFillColors = {\n    5: \"rgba(100, 75, 80, .3)\",\n    10: \"rgba(90, 50, 50, .3)\",\n    50: \"rgba(100, 50, 31, .3)\",\n    100: \"rgba(100, 65, 0, .3)\",\n    1000: \"rgba(255, 69, 0, .3)\",\n    10000: \"rgba(255, 0 , 0, .3)\"\n};\n\nconst defaultGridStrokeColors = {\n    5: \"pink\",\n    10: \"lightcoral\",\n    50: \"coral\",\n    100: \"orange\",\n    1000: \"orangered\",\n    10000: \"red\"\n};\n\ninterface ExtendedFeature extends Feature {\n    x: number\n    y: number\n    count: number\n    clustertype: string\n}\n\nexport class AnyclusterOpenLayers extends AnyclusterClient {\n\n    currentZoom: number\n    gridFillColors: Record<number, string>\n    gridStrokeColors: Record<number, string>\n\n    constructor(map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n        this.gridFillColors = settings.gridFillColors ? settings.gridFillColors : defaultGridFillColors;\n        this.gridStrokeColors = settings.gridStrokeColors ? settings.gridStrokeColors : defaultGridStrokeColors;\n\n    }\n\n\n    removeArea() {\n        if (this.map.hasOwnProperty(\"areaLayer\")) {\n            this.map.areaLayer.getSource().clear();\n        }\n    }\n\n    getAreaStyle(feature: Feature, resolution: number): Style {\n\n        const style = new Style({\n            stroke: new Stroke({\n                color: \"rgba(255, 0, 0, 1)\",\n                width: 2,\n            }),\n            fill: new Fill({\n                color: \"rgba(255, 0, 0, .3)\",\n            }),\n        });\n\n        return style;\n    }\n\n    addArea(geojson: IGeoJSON) {\n        if (!this.map.hasOwnProperty(\"areaLayer\")) {\n            this.createAreaLayer();\n        }\n\n        const features = new GeoJSON({\n            featureProjection: \"EPSG:3857\"\n        }).readFeatures(geojson);\n\n        \n        this.map.areaLayer.getSource().addFeatures(features);\n\n    }\n\n    createClusterLayers() {\n\n        const gridClusterLayer = new VectorLayer({\n            source: new VectorSource(),\n            style: this.getCellStyle.bind(this) as any,\n        });\n\n        this.map.addLayer(gridClusterLayer);\n        this.map.gridClusterLayer = gridClusterLayer;\n\n        const kmeansLayer = new VectorLayer({\n            source: new VectorSource()\n        });\n\n        this.map.addLayer(kmeansLayer);\n        this.map.kmeansLayer = kmeansLayer;\n\n        this.map.on('click', (event: any) => {\n\n            let hit = false;\n\n            this.map.forEachFeatureAtPixel(event.pixel, (feature: ExtendedFeature) => {\n\n                if (hit == false){\n\n                    console.log(feature)\n\n                    if (feature.clustertype == \"cell\" || feature.clustertype == \"marker\"){\n                        hit = true;\n                        let zoom = this.getZoom();\n\n                        if (zoom >= 13 || feature.count == 1) {\n                            this.onMarkerFinalClick(feature);\n                        }\n\n                        else {\n                            this.markerClickFunction(feature.x, feature.y);\n                        }\n                    }\n                }\n            });\n        });\n\n        this.map.on(\"pointermove\", (event: any) => {\n            let pixel = this.map.getEventPixel(event.originalEvent);\n            let hit = this.map.hasFeatureAtPixel(pixel);\n            this.map.getViewport().style.cursor = hit ? 'pointer' : '';\n        });\n    }\n\n    createAreaLayer() {\n\n        const areaLayer = new VectorLayer({\n            source: new VectorSource(),\n            style: this.getAreaStyle.bind(this) as any,\n        });\n\n        const layers = this.map.getLayers();\n        layers.insertAt(2, areaLayer);\n        //this.map.addLayer(areaLayer);\n        this.map.areaLayer = areaLayer;\n    }\n\n    getMarkerIcon(cluster: Cluster) {\n\n        const piniconObj = this.selectPinIcon(cluster);\n\n        const icon = new Icon({\n            anchor: piniconObj.relativeAnchor,\n            crossOrigin: 'anonymous',\n            src: piniconObj.url,\n            imgSize: piniconObj.size,\n            size: piniconObj.size\n        });\n\n        const style = new Style({\n            image: icon\n        });\n\n        return style;\n          \n    }\n\n    drawMarker(cluster: Cluster) {\n\n        const style = this.getMarkerIcon(cluster);\n        const point = new Point([cluster.center.x, cluster.center.y])\n\n        let marker = new Feature(point);\n\n        marker.setStyle(style);\n\n        let extendedMarker: ExtendedFeature = this.setMarkerProps(marker, cluster);\n        extendedMarker.clustertype = \"marker\";\n\n        this.map.kmeansLayer.getSource().addFeature(extendedMarker)\n\n        this.markerList.push(extendedMarker);\n    }\n\n    getCellStyle(feature: Feature, resolution: number): Style {\n\n        const roundedCount = this.roundMarkerCount(feature.get(\"count\"));\n        const fillColor = this.gridFillColors[roundedCount];\n        const strokeColor = this.gridStrokeColors[roundedCount];\n        const strokeWeight = 2;\n\n        const style = new Style({\n            stroke: new Stroke({\n                color: strokeColor,\n                width: strokeWeight,\n            }),\n            fill: new Fill({\n                color: fillColor,\n            }),\n        });\n\n        return style;\n    }\n\n    drawCell(cluster: Cluster) {\n\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawMarker(cluster)\n        }\n        else {\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"geometry\": cluster.geojson,\n            };\n\n            let feature = new GeoJSON().readFeature(geojson);\n\n            let extendedFeature: ExtendedFeature = this.setMarkerProps(feature, cluster);\n            extendedFeature.clustertype = \"cell\";\n\n            this.map.gridClusterLayer.getSource().addFeature(extendedFeature)\n\n        }\n\n    }\n\n    removeAllMarkers() {\n\n        \n        this.map.kmeansLayer.getSource().clear();\n\n        if (this.map.hasOwnProperty(\"gridClusterLayer\")) {\n            this.map.gridClusterLayer.getSource().clear();\n        }\n\n        this.markerList.length = 0;\n\n    }\n\n    addMapEventListeners () {\n        // unfortunately fires after loadend\n        this.map.addEventListener(\"moveend\", (event: any) => {\n\n            let newZoom = this.getZoom();\n            if (newZoom != this.currentZoom){\n                this.removeAllMarkers();\n                this.currentZoom = newZoom;\n            }\n            this.getClusters();\n        });\n    }\n\n\n    getViewport(): Viewport {\n\n        const view = this.map.getView();\n\n        const extent = view.calculateExtent(this.map.getSize());\n\n        const left = extent[0];\n        const bottom = extent[1];\n        const right = extent[2];\n        const top = extent[3];\n\n        const viewportJSON = {\n            \"left\": left,\n            \"top\": top,\n            \"right\": right,\n            \"bottom\": bottom\n        };\n\n        return viewportJSON;\n        \n    }\n\n    getZoom(): number {\n        const view = this.map.getView();\n        return view.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n        const view = this.map.getView();\n        view.animate({\n            zoom: zoom,\n            center: [x, y],\n            duration: 500,\n        });\n    }\n\n}"],"names":["$b0d4e62e8aa64baf$var$defaultGridFillColors","$b0d4e62e8aa64baf$var$defaultGridStrokeColors","$b0d4e62e8aa64baf$export$e7e1d3d8299bc13e","$kEX8F$anyclusterclient","AnyclusterClient","constructor","map","apiUrl","markerFolderPath","settings","super","this","currentZoom","getZoom","gridFillColors","gridStrokeColors","removeArea","hasOwnProperty","areaLayer","getSource","clear","getAreaStyle","feature","resolution","$kEX8F$olstyle","Style","stroke","Stroke","color","width","fill","Fill","addArea","geojson","createAreaLayer","features","$parcel$interopDefault","$kEX8F$olformatGeoJSON","featureProjection","readFeatures","addFeatures","createClusterLayers","gridClusterLayer","$kEX8F$ollayerVector","source","$kEX8F$olsourceVector","style","getCellStyle","bind","addLayer","kmeansLayer","on","event","hit","forEachFeatureAtPixel","pixel","console","log","clustertype","count","onMarkerFinalClick","markerClickFunction","x","y","getEventPixel","originalEvent","hasFeatureAtPixel","getViewport","cursor","getLayers","insertAt","getMarkerIcon","cluster","piniconObj","selectPinIcon","icon","Icon","anchor","relativeAnchor","crossOrigin","src","url","imgSize","size","image","drawMarker","point","$kEX8F$olgeomPoint","center","marker","$kEX8F$olFeature","setStyle","extendedMarker","setMarkerProps","addFeature","markerList","push","roundedCount","roundMarkerCount","get","fillColor","strokeColor","drawCell","type","geometry","readFeature","extendedFeature","removeAllMarkers","length","addMapEventListeners","addEventListener","newZoom","getClusters","extent","getView","calculateExtent","getSize","left","bottom","right","top","setZoom","zoom","setMap","animate","duration"],"version":3,"file":"main.js.map"}