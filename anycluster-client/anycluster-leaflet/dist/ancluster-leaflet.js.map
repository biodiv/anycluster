{"mappings":"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","sources":["src/index.ts","src/anycluster-leaflet.ts"],"sourcesContent":["export {\n    ClusterMethod,\n    AnyclusterLeaflet,\n} from \"./anycluster-leaflet\";","import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    Cluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n} from 'anycluster-client';\n\nimport * as  L from 'leaflet';\n\nexport {\n    ClusterMethod\n};\n\nexport class AnyclusterLeaflet extends AnyclusterClient {\n\n    currentZoom: number\n\n    constructor(map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n    }\n\n\n    removeArea() {\n        if (this.map.hasOwnProperty(\"areaLayer\")) {\n            this.map.areaLayer.clearLayers();\n        }\n    }\n\n    addArea(geojson: IGeoJSON) {\n        if (!this.map.hasOwnProperty(\"areaLayer\")) {\n            this.createAreaLayer();\n        }\n\n        L.geoJSON(geojson, {\n            style: {\n                color: 'red'\n            }\n        }).addTo(this.map.areaLayer);\n\n    }\n\n    createClusterLayers() {\n        const kmeansLayer = L.layerGroup().addTo(this.map);\n        this.map.kmeansLayer = kmeansLayer;\n\n        // support geojson for grid cluster\n        const gridClusterLayer = L.layerGroup().addTo(this.map);\n        this.map.gridClusterLayer = gridClusterLayer;\n\n    }\n\n    createAreaLayer() {\n        const areaLayer = L.layerGroup().addTo(this.map);\n        this.map.areaLayer = areaLayer;\n\n    }\n\n    getMarkerIcon(cluster: Cluster) {\n\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n\n        // create a leaflet icon\n        const markerIcon = L.icon({\n            iconUrl: piniconObj.url,\n            iconSize: piniconObj.size,\n            iconAnchor: piniconObj.anchor,\n            popupAnchor: piniconObj.popupAnchor\n        });\n\n        return markerIcon;\n\n    }\n\n    drawMarker(cluster: Cluster) {\n        const markerIcon = this.getMarkerIcon(cluster);\n\n        const latLng = L.latLng(cluster.center.y, cluster.center.x);\n\n        const marker_options = {\n            icon: markerIcon\n        };\n\n        let marker = L.marker(latLng, marker_options);\n\n        marker = this.setMarkerProps(marker, cluster);\n\n        this.addMarkerClickListener(marker);\n\n        marker.addTo(this.map.kmeansLayer);\n\n        this.markerList.push(marker);\n\n    }\n\n    drawCell(cluster: Cluster) {\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawMarker(cluster)\n        }\n        else {\n            const latLng = L.latLng(cluster.center.y, cluster.center.x);\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"count\": count,\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"count\": count\n                }\n            };\n\n\n            const roundedCount = this.roundMarkerCount(count);\n\n            const fillColor = this.gridFillColors[roundedCount];\n            const strokeColor = this.gridStrokeColors[roundedCount];\n            const strokeWeight = 1;\n\n            const cell = L.geoJSON(geojson, {\n                style: {\n                    color: strokeColor,\n                    stroke: true,\n                    fillColor: fillColor,\n                    weight: strokeWeight,\n                    fillOpacity: 1,\n                }\n            });\n\n            // add properties required by anycluster to marker\n            cell.latitude = latLng.lat;\n            cell.longitude = latLng.lng;\n            cell.x = latLng.lng;\n            cell.y = latLng.lat;\n            cell.count = count;\n            cell.geojson = geojson;\n\n            this.addMarkerClickListener(cell);\n\n            cell.addTo(this.map.gridClusterLayer);\n        }\n\n    }\n\n    removeAllMarkers() {\n\n        // remove all the markers in one go\n        this.map.kmeansLayer.clearLayers();\n\n        if (this.map.hasOwnProperty(\"gridClusterLayer\")) {\n            this.map.gridClusterLayer.clearLayers();\n        }\n\n        this.markerList.length = 0;\n\n\n    }\n\n    addMapEventListeners() {\n        this.map.addEventListener(\"moveend\", event => this.getClusters());\n        this.map.addEventListener(\"zoomend\", event => this.removeAllMarkers());\n    }\n\n\n    getViewport(): Viewport {\n\n        const viewport = this.map.getBounds();\n\n        if (viewport.isValid()) {\n            const viewportJSON = {\n                \"left\": viewport.getSouthWest().wrap().lng,\n                \"top\": viewport.getNorthEast().wrap().lat,\n                \"right\": viewport.getNorthEast().wrap().lng,\n                \"bottom\": viewport.getSouthWest().wrap().lat\n            };\n\n            return viewportJSON;\n        }\n        else {\n            throw new Error(\"invalid viewport\");\n        }\n\n    }\n\n    getZoom(): number {\n        return this.map.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n        const center = L.latLng(y, x);\n        this.map.setView(center, zoom);\n    }\n\n    addMarkerClickListener(marker) {\n\n        const zoom = this.getZoom();\n\n        if (zoom >= 13 || marker.count == 1) {\n            marker.on(\"click\", (event) => {\n                this.onMarkerFinalClick(marker);\n            });\n        }\n\n        else {\n            marker.on(\"click\", (event) => {\n                this.markerClickFunction(marker.x, marker.y);\n            });\n        }\n    }\n\n}"],"names":[],"version":3,"file":"ancluster-leaflet.js.map"}