{"mappings":"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","sources":["src/anycluster-leaflet.ts"],"sourcesContent":["import {\n    AnyclusterClient,\n    AnyclusterClientSettings,\n    Viewport,\n    Cluster,\n    ClusterMethod,\n    GeoJSON as IGeoJSON,\n} from 'anycluster-client';\n\nimport * as  L from 'leaflet';\n\nexport {\n    ClusterMethod\n};\n\nconst defaultGridFillColors = {\n    5: \"rgba(100, 75, 80, 1)\",\n    10: \"rgba(90, 50, 50, 1)\",\n    50: \"rgba(100, 50, 31, 1)\",\n    100: \"rgba(100, 65, 0, 1)\",\n    1000: \"rgba(255, 69, 0, 1)\",\n    10000: \"rgba(255, 0 , 0, 1)\"\n};\n\nconst defaultGridStrokeColors = {\n    5: \"pink\",\n    10: \"lightcoral\",\n    50: \"coral\",\n    100: \"orange\",\n    1000: \"orangered\",\n    10000: \"red\"\n};\n\nexport class AnyclusterLeaflet extends AnyclusterClient {\n\n    currentZoom: number\n    gridFillColors: Record<number, string>\n    gridStrokeColors: Record<number, string>\n\n    constructor(map: any, apiUrl: string, markerFolderPath: string, settings: AnyclusterClientSettings) {\n        super(map, apiUrl, markerFolderPath, settings);\n\n        this.currentZoom = this.getZoom();\n\n        this.gridFillColors = settings.gridFillColors ? settings.gridFillColors : defaultGridFillColors;\n        this.gridStrokeColors = settings.gridStrokeColors ? settings.gridStrokeColors : defaultGridStrokeColors;\n\n    }\n\n\n    removeArea() {\n        if (this.map.hasOwnProperty(\"areaLayer\")) {\n            this.map.areaLayer.clearLayers();\n        }\n    }\n\n    addArea(geojson: IGeoJSON) {\n        if (!this.map.hasOwnProperty(\"areaLayer\")) {\n            this.createAreaLayer();\n        }\n\n        L.geoJSON(geojson, {\n            style: {\n                color: 'red'\n            }\n        }).addTo(this.map.areaLayer);\n\n    }\n\n    createClusterLayers() {\n        const kmeansLayer = L.layerGroup().addTo(this.map);\n        this.map.kmeansLayer = kmeansLayer;\n\n        // support geojson for grid cluster\n        const gridClusterLayer = L.layerGroup().addTo(this.map);\n        this.map.gridClusterLayer = gridClusterLayer;\n\n    }\n\n    createAreaLayer() {\n        const areaLayer = L.layerGroup().addTo(this.map);\n        this.map.areaLayer = areaLayer;\n\n    }\n\n    getMarkerIcon(cluster: Cluster) {\n\n        // get the correct icon\n        const piniconObj = this.selectPinIcon(cluster);\n\n        // create a leaflet icon\n        const markerIcon = L.icon({\n            iconUrl: piniconObj.url,\n            iconSize: piniconObj.size,\n            iconAnchor: piniconObj.anchor,\n            popupAnchor: piniconObj.popupAnchor\n        });\n\n        return markerIcon;\n\n    }\n\n    drawMarker(cluster: Cluster) {\n        const markerIcon = this.getMarkerIcon(cluster);\n\n        const latLng = L.latLng(cluster.center.y, cluster.center.x);\n\n        const marker_options = {\n            icon: markerIcon\n        };\n\n        let marker = L.marker(latLng, marker_options);\n\n        marker = this.setMarkerProps(marker, cluster);\n\n        this.addMarkerClickListener(marker);\n\n        marker.addTo(this.map.kmeansLayer);\n\n        this.markerList.push(marker);\n\n    }\n\n    drawCell(cluster: Cluster) {\n        const count = cluster.count;\n\n        if (count == 1) {\n            this.drawMarker(cluster)\n        }\n        else {\n            const latLng = L.latLng(cluster.center.y, cluster.center.x);\n\n            const geojson = {\n                \"type\": \"Feature\",\n                \"count\": count,\n                \"geometry\": cluster.geojson,\n                \"properties\": {\n                    \"count\": count\n                }\n            };\n\n\n            const roundedCount = this.roundMarkerCount(count);\n\n            const fillColor = defaultGridFillColors[roundedCount];\n            const strokeWeight = 0;\n\n            const cell = L.geoJSON(geojson, {\n                style:  {\n                    color: fillColor,\n                    stroke: true\n                }\n            });\n\n            // add properties required by anycluster to marker\n            cell.latitude = latLng.lat;\n            cell.longitude = latLng.lng;\n            cell.x = latLng.lng;\n            cell.y = latLng.lat;\n            cell.count = count;\n            cell.geojson = geojson;\n\n            this.addMarkerClickListener(cell);\n\n            cell.addTo(this.map.gridClusterLayer);\n        }\n\n    }\n\n    removeAllMarkers() {\n\n        // remove all the markers in one go\n        this.map.kmeansLayer.clearLayers();\n\n        if (this.map.hasOwnProperty(\"gridClusterLayer\")) {\n            this.map.gridClusterLayer.clearLayers();\n        }\n\n        this.markerList.length = 0;\n\n\n    }\n\n    addMapEventListeners() {\n        this.map.addEventListener(\"moveend\", event => this.getClusters());\n        this.map.addEventListener(\"zoomend\", event => this.removeAllMarkers());\n    }\n\n\n    getViewport(): Viewport {\n\n        const viewport = this.map.getBounds();\n\n        if (viewport.isValid()) {\n            const viewportJSON = {\n                \"left\": viewport.getSouthWest().wrap().lng,\n                \"top\": viewport.getNorthEast().wrap().lat,\n                \"right\": viewport.getNorthEast().wrap().lng,\n                \"bottom\": viewport.getSouthWest().wrap().lat\n            };\n\n            return viewportJSON;\n        }\n        else {\n            throw new Error(\"invalid viewport\");\n        }\n\n    }\n\n    getZoom(): number {\n        return this.map.getZoom();\n    }\n\n    setZoom(zoom: number): void {\n        this.map.setZoom(zoom);\n    }\n\n\n    setMap(x: number, y: number, zoom: number): void {\n        const center = L.latLng(y, x);\n        this.map.setView(center, zoom);\n    }\n\n    addMarkerClickListener(marker) {\n\n        const zoom = this.getZoom();\n\n        if (zoom >= 13 || marker.count == 1) {\n            marker.on(\"click\", (event) => {\n                this.onMarkerFinalClick(marker);\n            });\n        }\n\n        else {\n            marker.on(\"click\", (event) => {\n                this.markerClickFunction(marker.x, marker.y);\n            });\n        }\n    }\n\n}"],"names":["$daa68199c6ecee0a$var$defaultGridFillColors","$daa68199c6ecee0a$var$defaultGridStrokeColors","$daa68199c6ecee0a$export$d28c3646e727c4c9","$kEX8F$anyclusterclient","AnyclusterClient","constructor","map","apiUrl","markerFolderPath","settings","super","this","currentZoom","getZoom","gridFillColors","gridStrokeColors","removeArea","hasOwnProperty","areaLayer","clearLayers","addArea","geojson","createAreaLayer","$kEX8F$leaflet","geoJSON","style","color","addTo","createClusterLayers","kmeansLayer","layerGroup","gridClusterLayer","getMarkerIcon","cluster","piniconObj","selectPinIcon","icon","iconUrl","url","iconSize","size","iconAnchor","anchor","popupAnchor","drawMarker","markerIcon","latLng","center","y","x","marker_options","marker","setMarkerProps","addMarkerClickListener","markerList","push","drawCell","count","type","geometry","properties","roundedCount","roundMarkerCount","fillColor","cell","stroke","latitude","lat","longitude","lng","removeAllMarkers","length","addMapEventListeners","addEventListener","event","getClusters","getViewport","viewport","getBounds","isValid","left","getSouthWest","wrap","top","getNorthEast","right","bottom","Error","setZoom","zoom","setMap","setView","on","onMarkerFinalClick","markerClickFunction"],"version":3,"file":"main.js.map"}